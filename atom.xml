<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>幻冬狐`Blog</title>
  
  <subtitle>前端</subtitle>
  <link href="https://xuesenxu.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuesenxu.github.io/"/>
  <updated>2022-09-20T13:53:37.470Z</updated>
  <id>https://xuesenxu.github.io/</id>
  
  <author>
    <name>幻冬狐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node三大模块</title>
    <link href="https://xuesenxu.github.io/posts/7d322883.html"/>
    <id>https://xuesenxu.github.io/posts/7d322883.html</id>
    <published>2022-09-20T13:16:55.000Z</published>
    <updated>2022-09-20T13:53:37.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-fs-文件系统模块"><a href="#1-fs-文件系统模块" class="headerlink" title="1 fs 文件系统模块"></a>1 fs 文件系统模块</h2><h3 id="1-1-什么是fs文件系统模块"><a href="#1-1-什么是fs文件系统模块" class="headerlink" title="1.1 什么是fs文件系统模块"></a>1.1 什么是fs文件系统模块</h3><font color="red">fs模块</font>是Node.js官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。如果要在JavaScript代码，使用fs模块来操作文件，则需要先引入。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure>### 1.2 fs.readFile()的语法格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[,option],callback)</span><br></pre></td></tr></table></figure>参数解读：* 参数1：<font color="red">必选</font>参数，字符串，表示文件路径* 参数2：可选参数，表示以什么<font color="red">编码格式</font>来读取文件。* 参数3：<font color="red">必选</font>参数，文件读取完成后，通过回调函数拿到读取的结果。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./readme.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>### 1.3 fs.writeFile()的语法格式 使用fs.writeFile()方法，可以向指定的文件中写入内容，语法格式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file,data[,option],callback) </span><br></pre></td></tr></table></figure>参数解读：* 参数1：<font color="red">必选</font>参数，需要指定一个<font color="red">文件路径的字符串</font>，表示文件的存放路径。* 参数2：<font color="red">必选</font>参数，表示要写入的内容。* 参数3：可选参数，表示以什么格式写入文件内容，默认值是utf8。* 参数4：<font color="red">必选</font>参数，文件写入完成后的回调函数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./redme.txt&#x27;</span>,<span class="string">&#x27;Hello World&#x27;</span>,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>### 1.4 fs 模块-路径动态拼接的问题在使用fs模块操作文件时，如果提供的操作路径是以./或../开头的<font color="red">相对路径</font>时，很容易出现路径动态拼接错误的问题。原因：代码在运行的时候，<font color="red">会以执行node命令时所处的目录</font>，动态拼接出被操作文件的完整路径。**解决方案：** `_dirname`表示当前文件所处的目录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(__dirname + <span class="string">&#x27;/files/txt&#x27;</span>, newStr, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>, err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成绩写入成功！&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>**<font color="red">注意：</font>*** fs.writeFile()方法只能用来创建文件，不能用来创建路径* 重复调用fs.writeFile()写入同一个文件，新写入的内容会覆盖之前的旧内容## 2 path路径模块### 2.1 什么是path路径模块<font color="red">path 模块</font>是Node.js官方提供的、用来<font color="red">处理路径</font>的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。例如：* <font color="blue">path.join()</font>方法，用来<font color="red">用来将多个路径片段拼接成一个完整的路径字符串</font>。* <font color="blue">path.basename()</font>方法，用来从路径字符串中，将文件名解析出来。如果想使用必须先导入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure>### 2.2 路径拼接**<font color="red">path.join()</font>的语法格式**使用path.join()方法，可以把多个路径片段拼接为完整的路径字符串，格式如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths]);</span><br></pre></td></tr></table></figure>参数：paths\<String\>路径片段的序列返回值：\<String\><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>**注意：**<font color="red">凡是涉及到路径拼接的操作，都要使用path.join()方法进行处理</font>。### 2.3 获取路径中的文件名**<font color="red">path.basename()</font>的语法格式**使用path.basename()方法，可以获取路径中最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[,ext])</span><br></pre></td></tr></table></figure>参数：* path\<String\>必选参数，表示一个路径的字符串* ext\<String\>可选参数，表示文件扩展名返回值：* \<String\>表示路径中的最后一个部分<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const fullName = path.basename(fpath)</span></span><br><span class="line"><span class="comment">// console.log(fullName)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt)</span><br></pre></td></tr></table></figure>### 2.4 获取路径中的文件扩展名**<font color="red">path.extname()</font>的语法格式**使用path.extname()方法，可以获取路径中的扩展名部分，语法格式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure>参数：\<String\>必选参数，表示一个路径的字符串返回：\<String\>返回得到的扩展名字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext)</span><br></pre></td></tr></table></figure>## 3 http模块### 3.1 什么是http模块<font color="red">http 模块</font>是Node.js官方提供的、用来创建web服务器的模块。通过http模块提供的<font color="#5CACEE">http.createServer()</font>方法，就能方便的把一台普通的电脑，变成一台Web服务器，从而对外提供资源服务。如果要希望使用http模块创建Web服务器，则需要先导入它：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure>### 3.2 服务器相关的概念#### 3.2.1 IP地址<font color="red">**IP 地址**</font>就是互联网上<font color="red">每台计算机的唯一地址</font>，因此 IP 地址具有唯一性。如果把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方 IP 地址的前提下，才能与对应的电脑之间进行数据通信。**IP** 地址的格式：通常用“<font color="#5CACEE">点分十进制</font>”表示成（<font color="red">a.b.c.d</font>）x的形式，其中，a,b,c,d 都是 0~255 之间的十进制整数。例如：用点分十进表示的 IP地址（192.168.1.1）注意：<font color="red">互联网中每台Web服务器，都有自己的IP地址</font><h4 id="3-2-2-域名和域名服务器"><a href="#3-2-2-域名和域名服务器" class="headerlink" title="3.2.2 域名和域名服务器"></a>3.2.2 <font color="red">域名</font>和<font color="red">域名服务器</font></h4><p>尽管IP地址能够唯一地标记网络上的计算机，但IP地址是一长串数字, <font color="#5CACEE">不直观</font>，而且 <font color="#5CACEE">不便于记忆</font>,于是人们又发明了另一套字符型的地址方案，即所谓的<strong><font color="red">域名(Domain Name)地址</font></strong>。</p> <font color="#5CACEE">IP地址</font>和<font color="#5CACEE">域名</font>是一一对应的关系，这份对应关系存放在一种叫做<font color="red">**域名服务器**</font>(DNS，Domain name server)的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，<font color="red">**域名服务器就是提供** **IP** **地址和域名之间的转换服务的服务器**</font>。注意：1. 单纯使用 IP 地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便。2. 在开发测试期间， <font color="red">127.0.0.1 </font>对应的域名是 <font color="red">localhost</font>，它们都代表我们自己的这台电脑，在使用效果上没有任何区别。#### 3.2.3 端口号计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。同样的道理，在一台电脑中，可以运行成百上千个 web 服务。每个 web 服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给<font color="red">对应的 web 服务</font>进行处理。注意：1. 每个端口号不能同时被多个 web 服务占用。2. 在实际应用中，URL 中的<font color="red"> 80 端口可以被省略</font>。### 3.3 创建最基本的web服务器**创建服务器的基本步骤**1. 导入http模块   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure>2. 创建web服务器实例   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure>3. 为服务器实例绑定**<font color="red">request</font>**事件，<font color="#5CACEE">监听客户端的请求</font><p>   为服务器实例绑定request事件，即可监听客户端发送过来的网络请求：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用服务器实例的.on()方法，为服务器绑定一个request事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//只有客户端来请求我们自己的服务器，就会触发 request事件，从而调用这个事件处理函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Some visit our web server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li><p>启动服务器</p><p>调用服务器实例的 .listen() 方法，即可启动当前的 web 服务器实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用 server.listen(端口号，cb回调)方法，即可启动web服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-1-req请求对象"><a href="#3-3-1-req请求对象" class="headerlink" title="3.3.1 req请求对象"></a>3.3.1 req请求对象</h4><p>只要服务器接收到了客户端的请求，就会调用通过<font color="red"> server.on()</font> 为服务器绑定的 <font color="blue">request 事件处理函数</font>。</p><p>如果想在事件处理函数中，<font color="blue">访问与客户端相关的</font><font color="red"> <strong>数据</strong></font><font color="blue">或</font><font color="red"> <strong>属性</strong></font>，可以使用如下的方式：</p><p><img src="https://img-blog.csdnimg.cn/d739332eaf844aa7a4ac78fabff6e50f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_17,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tO0Nw97J-1649642131230)(../images/image-20220328134016586.png)\]"></p><h4 id="3-3-2-res响应对象"><a href="#3-3-2-res响应对象" class="headerlink" title="3.3.2 res响应对象"></a>3.3.2 res响应对象</h4><p>在服务器的 request 事件处理函数中，如果想<font color="blue">访问与服务器相关的</font><strong><font color="red"> 数据</font></strong><font color="blue">或</font><strong><font color="red"> 属性</font></strong>，可以使用如下的方式：</p><p><img src="https://img-blog.csdnimg.cn/44de0f18db8b45139468c27b7f33e8eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vRRShjzE-1649642131231)(../images/image-20220328133847259.png)\]"></p><h4 id="3-3-3-解决中文乱码问题"><a href="#3-3-3-解决中文乱码问题" class="headerlink" title="3.3.3 解决中文乱码问题"></a>3.3.3 解决中文乱码问题</h4><p>当调用 res.end() 方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动<font color="red">设置内容的编码格式</font>：</p><p><img src="https://img-blog.csdnimg.cn/bc859fb84b8e4648a525e0cd90ffc331.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_17,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aBIRHsID-1649642131232)(../images/image-20220328133910036.png)\]"></p><h3 id="3-4-根据不同的URL响应不同的HTML内容"><a href="#3-4-根据不同的URL响应不同的HTML内容" class="headerlink" title="3.4 根据不同的URL响应不同的HTML内容"></a>3.4 根据不同的URL响应不同的HTML内容</h3><h4 id="3-4-1-核心实现步骤："><a href="#3-4-1-核心实现步骤：" class="headerlink" title="3.4.1 核心实现步骤："></a>3.4.1 <strong>核心实现步骤：</strong></h4><ol><li>获取请求的 url 地址</li><li>设置默认的响应内容为 404 Not found</li><li>判断用户请求的是否为 / 或 /index.html 首页</li><li>判断用户请求的是否为 /about.html 关于页面</li><li>设置 Content-Type 响应头，防止中文乱码</li><li>使用 res.end() 把内容响应给客户端</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-fs-文件系统模块&quot;&gt;&lt;a href=&quot;#1-fs-文件系统模块&quot; class=&quot;headerlink&quot; title=&quot;1 fs 文件系统模块&quot;&gt;&lt;/a&gt;1 fs 文件系统模块&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是fs文件系统模块&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    <category term="node" scheme="https://xuesenxu.github.io/categories/node/"/>
    
    
    <category term="node" scheme="https://xuesenxu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>PC端实现列表懒加载</title>
    <link href="https://xuesenxu.github.io/posts/21ff1604.html"/>
    <id>https://xuesenxu.github.io/posts/21ff1604.html</id>
    <published>2022-09-17T08:02:21.000Z</published>
    <updated>2022-09-19T09:28:14.696Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装引入lodash</p><p> <code>npm i --save lodash</code></p><p> <code>import _throttle from &#39;lodash/throttle&#39;</code></p></li><li><p>给Vue组件根标签添加滚动事件，PC端是滚动实现懒加载，所以必须要有滚动事件，不过这个滚动事件不一定是在组件的根标签上，也可以是在其他元素，但是这个元素必须是列表元素的父级以上的组件。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;recomand-show&quot;</span> @<span class="attr">scroll</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下面来看看懒加载的实现的JS方法</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒加载的方法</span></span><br><span class="line"><span class="attr">onScroll</span>: <span class="title function_">_throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;recomand-show&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> scrollTop = info.<span class="property">scrollTop</span>;</span><br><span class="line">  <span class="keyword">var</span> clientHeight = info.<span class="property">clientHeight</span>;</span><br><span class="line">  <span class="keyword">var</span> scrollHeight = info.<span class="property">scrollHeight</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (scrollHeight - clientHeight &lt; scrollTop + <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">loading</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">async</span> addList () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pages</span>.<span class="property">pageNum</span> ++;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">recommendList</span>(<span class="variable language_">this</span>.<span class="property">pages</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">recommandCourse</span> = [...<span class="variable language_">this</span>.<span class="property">recommandCourse</span>,...res.<span class="property">rows</span>];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">recommandTotal</span> = res.<span class="property">total</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">recommandCourse</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">recommandTotal</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p> 上面的代码中用到了如下几种JS属性：</p><ul><li><p><code>scrollTop</code>：scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。</p><p>一个元素的 scrollTop 值是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。当一个元素的内容没有产生垂直方向的滚动条，那么它的 scrollTop 值为0。</p></li><li><code>clientHeight</code>：clientHeight 属性是一个只读属性，它返回该元素的像素高度，高度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条，是一个整数，单位是像素 px。</li><li><p><code>scrollHeight</code>：clientHeight 属性是一个只读属性，它返回该元素的像素高度，高度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条，是一个整数，单位是像素 px。</p><p>用一张图来说明他们的关系<br><img src="https://img-blog.csdnimg.cn/ce2ebb0dc1004f46823b2305471f8307.png#pic_center" alt="在这里插入图片描述"></p></li></ul></li></ol><pre><code>`scrollHeight - clientHeight &lt; scrollTop + 0.1`当这句代码返回`true`时我们可以确定在可视区域下面是没有卷进去的内容的，也就是上图深蓝色区域的下面是没有内容的，那么此时我们就要去调用接口获取新的数据。</code></pre><ol><li><code>_throttle</code>方法主要是为了防止页面抖动</li><li><p>完整代码如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;recommand-course&quot; id=&quot;recomand-show&quot; @scroll=&quot;onScroll&quot; v-loading=&quot;recommandCourseLoading&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;rec-course&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;course-list-show&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;content_header&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;title&quot;&gt;推荐课程&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div v-if=&quot;isRecommandShow&quot;&gt;</span><br><span class="line">          &lt;ul class=&quot;course&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;course_item&quot;  :class=&quot;(index+1) % 3 === 0 ? &#x27;mar_right&#x27; : &#x27;&#x27;&quot; v-for=&quot;(item,index) in recommandCourse&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;img&quot; @click=&quot;toVideo(item.url)&quot;&gt;</span><br><span class="line">                  &lt;img :src=&quot;item.cover&quot; alt=&quot;&quot;/&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">              &lt;h3&gt;&#123;&#123;item.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">              &lt;p&gt;&#123;&#123;item.introduction&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">          &lt;div class=&quot;tip&quot; v-if=&quot;loading&quot;&gt;加载中...&lt;/div&gt;</span><br><span class="line">          &lt;div class=&quot;tip&quot; v-else&gt;没有更多了&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;none-course&quot; v-else&gt;</span><br><span class="line">          &lt;el-empty description=&quot;暂无数据&quot;&gt;&lt;/el-empty&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; recommendList &#125; from &#x27;@/api/course/courseController.js&#x27;</span><br><span class="line"></span><br><span class="line">import _throttle from &#x27;lodash/throttle&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      recommandCourse:[],</span><br><span class="line">      recommandTotal:0,</span><br><span class="line">      loading: true,</span><br><span class="line">      pages:&#123;</span><br><span class="line">        pageSize: 9,</span><br><span class="line">        pageNum: 1,</span><br><span class="line">      &#125;,</span><br><span class="line">      recommandCourseLoading: false,</span><br><span class="line">      isRecommandShow: true,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    this.getRecommendList();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //拼接前缀</span><br><span class="line">    addPre(item) &#123;</span><br><span class="line">      return `$&#123;process.env.VUE_APP_MINIO_API&#125;/train-platform/$&#123;item&#125;`</span><br><span class="line">    &#125;,</span><br><span class="line">    getRecommendList () &#123;</span><br><span class="line">      this.recommandCourseLoading = true;</span><br><span class="line">      recommendList(this.pages).then(res =&gt; &#123;</span><br><span class="line">        this.recommandCourse = [...this.recommandCourse,...res.rows];</span><br><span class="line">        this.recommandTotal = res.total;</span><br><span class="line">        if(this.recommandCourse !== null &amp;&amp; this.recommandCourse.length &gt; 0) &#123;</span><br><span class="line">          this.isRecommandShow = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          this.isRecommandShow = false</span><br><span class="line">        &#125;</span><br><span class="line">        this.recommandCourseLoading = false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //懒加载的方法</span><br><span class="line">    onScroll: _throttle(function () &#123;</span><br><span class="line">      console.log(&#x27;scroll&#x27;);</span><br><span class="line">      var info = document.getElementById(&#x27;recomand-show&#x27;);</span><br><span class="line">      var scrollTop = info.scrollTop;</span><br><span class="line">      var clientHeight = info.clientHeight;</span><br><span class="line">      var scrollHeight = info.scrollHeight;</span><br><span class="line"></span><br><span class="line">      if (scrollHeight - clientHeight &lt; scrollTop + 0.1) &#123;</span><br><span class="line">        console.log(&#x27;loading&#x27;,this.loading);</span><br><span class="line">        if(this.loading) &#123;</span><br><span class="line">          this.loading = false;</span><br><span class="line">          this.addList();</span><br><span class="line">          console.log(123)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    async addList () &#123;</span><br><span class="line">      console.log(&#x27;addList&#x27;);</span><br><span class="line">    </span><br><span class="line">      // console.log(&#x27;setTimeout&#x27;,this.pages.pageNum++);</span><br><span class="line">      this.pages.pageNum ++</span><br><span class="line">      </span><br><span class="line">      await recommendList(this.pages).then(res =&gt; &#123;</span><br><span class="line">          this.recommandCourse = [...this.recommandCourse,...res.rows];</span><br><span class="line">          this.recommandTotal = res.total</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      console.log(&#x27;此时数组的长度&#x27;,this.recommandCourse.length);</span><br><span class="line">      if (this.recommandCourse.length &gt;= this.recommandTotal) &#123;</span><br><span class="line">          this.loading = false</span><br><span class="line">          return</span><br><span class="line">      &#125;</span><br><span class="line">      this.loading = true</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    toVideo(url) &#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;PlayVideo&#x27;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          url</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  .recommand-course &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 80vh;</span><br><span class="line">    overflow-y: scroll;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    .rec-course &#123;</span><br><span class="line">      // width: 70%;</span><br><span class="line">      .course-list-show &#123;</span><br><span class="line">        width: 940px;</span><br><span class="line">        // margin-left: 27%;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">.recommand-course::-webkit-scrollbar &#123;display:none&#125;</span><br><span class="line">.content_header &#123;</span><br><span class="line">  // display: flex;</span><br><span class="line">  // align-items: center;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  div &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">    // width: 84%;</span><br><span class="line">  font-size: 18px;</span><br><span class="line">  font-weight: 400;</span><br><span class="line">  font-family: &quot;思源黑体&quot;;</span><br><span class="line">  // margin-top: 10px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">  text-align: left;</span><br><span class="line">  // line-height: 24px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.course &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      // height: 700px;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-wrap: wrap;</span><br><span class="line">      // justify-content: space-between;</span><br><span class="line">      margin-top: 30px;</span><br><span class="line">      padding: 0px;</span><br><span class="line">      .course_item &#123;</span><br><span class="line">          width: 300px;</span><br><span class="line">          height: 100%;</span><br><span class="line">          margin-right: 20px;</span><br><span class="line">          margin-bottom: 25px;</span><br><span class="line">          list-style: none;</span><br><span class="line">          .img &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">              width: 300px;</span><br><span class="line">              height: 200px;</span><br><span class="line">              cursor: pointer;</span><br><span class="line">              img&#123;</span><br><span class="line">                  width: 100%;</span><br><span class="line">                  height: 100%;</span><br><span class="line">                  object-fit:cover;</span><br><span class="line">              &#125;</span><br><span class="line">              .approval&#123;</span><br><span class="line">                  width: 300px;</span><br><span class="line">                  height: 200px;</span><br><span class="line">                  position: absolute;</span><br><span class="line">                  top: 0px;</span><br><span class="line">                  left: 0px;</span><br><span class="line">                  background-color: rgba($color: #000000, $alpha: 0.5);</span><br><span class="line">                  display: flex;</span><br><span class="line">                  justify-content: center;</span><br><span class="line">                  align-items: center;</span><br><span class="line">                  p &#123;</span><br><span class="line">                      font-size: 16px;</span><br><span class="line">                      color: #fff;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;          </span><br><span class="line">          h3&#123;</span><br><span class="line">            font-family: &#x27;思源黑体&#x27;;</span><br><span class="line">            color: rgba(31, 31, 31, 1);</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-weight: 500;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">            margin:4px 0px 3px 0px;</span><br><span class="line">          &#125;</span><br><span class="line">          p &#123;</span><br><span class="line">              margin: 0px;</span><br><span class="line">              color: rgba(97, 97, 97, 1);</span><br><span class="line">              font-size: 12px;</span><br><span class="line">              font-weight: 400;</span><br><span class="line">              font-family: &#x27;思源黑体&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      .mar_right &#123;</span><br><span class="line">          margin-right: 0px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">.tip &#123;</span><br><span class="line">  color: gainsboro;</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-bottom: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装引入lodash&lt;/p&gt;
&lt;p&gt; &lt;code&gt;npm i --save lodash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;import _throttle from &amp;#39;lodash/throttle&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/l</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React应用(基于React脚手架)</title>
    <link href="https://xuesenxu.github.io/posts/76b4ccae.html"/>
    <id>https://xuesenxu.github.io/posts/76b4ccae.html</id>
    <published>2022-09-17T07:29:15.000Z</published>
    <updated>2022-09-19T09:28:14.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用create-react-app创建react应用"><a href="#使用create-react-app创建react应用" class="headerlink" title="使用create-react-app创建react应用"></a>使用create-react-app创建react应用</h2><h3 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a>react脚手架</h3><ol><li><p>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</p><ol><li>包含了所有需要的配置（语法检查、jsx编译、devServer…）</li><li>下载好了所有相关的依赖</li><li>可以直接运行一个简单效果</li></ol></li><li><p>react提供了一个用于创建react项目的脚手架库: create-react-app</p></li><li>项目的整体技术架构为: react + webpack + es6 + eslint</li><li>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</li></ol><h3 id="创建并启动项目"><a href="#创建并启动项目" class="headerlink" title="创建并启动项目"></a>创建并启动项目</h3><p><strong>第一步</strong>，全局安装：<code>npm i -g create-react-app</code></p><p><strong>第二步</strong>，切换到想创项目的目录，使用命令：<code>create-react-app hello-react</code></p><p><strong>第三步</strong>，进入项目文件夹：<code>cd hello-react</code></p><p><strong>第四步</strong>，启动项目：<code>npm start</code></p><h3 id="react脚手架项目解构"><a href="#react脚手架项目解构" class="headerlink" title="react脚手架项目解构"></a><code>react</code>脚手架项目解构</h3><p>public —— 静态资源文件夹<br>        favicon.icon ——— 网站页签图标<br>        <strong><font color="red">index.html ———— 主页面</font></strong><br>        logo192.png ———- logo图<br>        logo512.png ———- logo图<br>        manifest.json ——- 应用加壳的配置文件<br>        robots.txt ———— 爬虫协议文件<br>src —— 源码文件夹<br>        App.css ———— App组件的样式<br>        <strong><font color="red">App.js ————- App组件</font></strong><br>        App.test.js —— 用于给App做测试<br>        index.css ——— 样式<br>        <strong><font color="red">index.js ———- 入口文件</font></strong><br>        logo.svg ———- logo图<br>        reportWebVitals.js<br>            —- 页面性能分析文件(需要web-vitals库的支持)<br>        setupTests.js<br>            —— 组件单元测试的文件(需要jest-dom库的支持)</p><p>脚手架public&gt;index.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- %PUBLIC_URL%代表public文件夹的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于指定网页添加到手机主屏幕后的图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若llq不支持js则展示标签中的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用React脚手架实现简单地Hello-World案例"><a href="#使用React脚手架实现简单地Hello-World案例" class="headerlink" title="使用React脚手架实现简单地Hello World案例"></a>使用React脚手架实现简单地Hello World案例</h3><p>在React脚手架帮我们生成的文件中有很多是我们现在用不到的，我们现阶段能用到的只有上面我标红的三个文件，下面我们来实现以下Hello World案例</p><p>首先从<code>index.html</code>文件说起，在<code>inde.html</code>文件中我们只需要保留以下内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就是如此简单，因为其他的一些功能我们暂时不需要</p><p>下面是程序的入口<code>index.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.首先要引入React核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.引入ReactDOM</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在index.js中引入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.渲染App到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这就是程序的入口文件，我们现在所需要的的功能不是那么复杂，所以可以写的稍微简单一点</p><p>然后就是所有组件的根组件<code>App.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是每一个组件的惯用写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.是首先引入react核心库，采用的是即引入全部核心库，又半引入了库中的一些类</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入其他组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Helllo&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Welcome</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Welcome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建并暴露App组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Welcome</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根组件里面尽量不要写页面，也不要写任何的业务逻辑，这些也免得效果和业务逻辑我们要将其分化到各个组件。</p><p>下面我们来说说组件，在React脚手架中，我们需要将我们写的组件全部存放在<code>src</code>目录下的<code>components</code>文件夹中，在这里面每一个单独的文件夹中，如果有<code>index.jsx</code>文件，<code>index.css</code>文件，以及其他的一些js文件的话那么就可以说这是一个组件了。其中<code>index.jsx</code>文件主要负责将虚拟DOM节点转换为真实DOM节点（只要在components文件夹下的文件夹中有此文件就可以说其是组件），<code>index.css</code>文件主要用于存放样式，其他的js文件用于处理一些业务逻辑。</p><p>Hello组件下<code>index.jsx</code>文件中的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入CSS样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;he&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.css</code>样式中的代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.he</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块化样式"><a href="#模块化样式" class="headerlink" title="模块化样式"></a>模块化样式</h3><p>我们在使用组件时如果不同的组件中的两个元素使用了相同的类名，虽然在不同的组件中，但是最终都会在<code>App.js</code>这个根组件上进行挂载，这就会造成写在下面的组件类样式会覆盖掉上面的组件类样式。</p><p>解决方案：</p><p>模块化组件样式：</p><p>将样式文件命名为<code>index.module.css</code></p><p>在<code>index.jsx</code>文件中引入如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块化CSS样式</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    render () &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;hello.title&#125;</span>&gt;</span>&#123;/**在jsx中类名的写法*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件的安装"><a href="#插件的安装" class="headerlink" title="插件的安装"></a>插件的安装</h3><p>在vscode中安装React插件可以帮我们快速生成代码。</p><p><a href="https://img-blog.csdnimg.cn/b543c75e95f140fb8dc6013f1f8d391c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_13,color_FFFFFF,t_70,g_se,x_16">外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传![(img-AVX3tNEp-1647827961701)(../images/image-20220312162732669.png)]</a></p><p>安装之后我们输入<code>rcc</code>可以帮我们快速生成类式组件，输入<code>rfc</code>可以帮我们快速生成函数式组件。</p><p>它的其他快速生成代码的方式：</p><p><a href="https://img-blog.csdnimg.cn/b05f655d260442829702698c004a4f29.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_15,color_FFFFFF,t_70,g_se,x_16">外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传![(img-UAOEfjIR-1647827961702)(../images/image-20220312163406943.png)]</a></p><h2 id="组件的组合使用-TODOList"><a href="#组件的组合使用-TODOList" class="headerlink" title="组件的组合使用-TODOList"></a>组件的组合使用-TODOList</h2><h3 id="功能界面的组件化编码流程"><a href="#功能界面的组件化编码流程" class="headerlink" title="功能界面的组件化编码流程"></a>功能界面的组件化编码流程</h3><ol><li>拆分组件: 拆分界面,抽取组件</li><li>实现静态组件: 使用组件实现静态页面效果</li><li>实现动态组件<ol><li>动态显示初始化数据<ol><li>数据类型</li><li>数据名称</li><li>保存在哪个组件?</li></ol></li><li>交互（从绑定事件监听开始）</li></ol></li></ol><h3 id="实现TODOList案例-静态组件"><a href="#实现TODOList案例-静态组件" class="headerlink" title="实现TODOList案例_静态组件"></a>实现TODOList案例_静态组件</h3><h2 id="外链图片转存失败-源站可能有防盗链机制-建议将图片保存下来直接上传-img-6mTn00PP-1647827961703-images-image-20220312165125334-png"><a href="#外链图片转存失败-源站可能有防盗链机制-建议将图片保存下来直接上传-img-6mTn00PP-1647827961703-images-image-20220312165125334-png" class="headerlink" title="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传![(img-6mTn00PP-1647827961703)(../images/image-20220312165125334.png)]"></a><a href="https://img-blog.csdnimg.cn/09ba2f3a504149a5892655e83cf363f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_20,color_FFFFFF,t_70,g_se,x_16">外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传![(img-6mTn00PP-1647827961703)(../images/image-20220312165125334.png)]</a></h2><p><strong>组件拆分图：</strong></p><p><a href="https://img-blog.csdnimg.cn/6629ace29b7e42bc9718f65f1202b122.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_20,color_FFFFFF,t_70,g_se,x_16">外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传![(img-D5h3Oby6-1647827961704)(../images/image-20220316152806844.png)]</a></p><p><strong>案例源代码：</strong></p><p><code>App.jsx</code>根组件中的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">FOOTER</span> <span class="keyword">from</span> <span class="string">&#x27;./components/FOOTER&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">HEADER</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HEADER&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">MAIN</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MAIN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state= &#123;</span><br><span class="line">        lists : [</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;吃饭&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;睡觉&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;打代码&#x27;</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    addList = <span class="function">(<span class="params">listObj</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="keyword">const</span> newLists = [listObj,...lists]</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">lists</span>:newLists&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    changeList = <span class="function">(<span class="params">id,done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> newLists = lists.<span class="title function_">map</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (list.<span class="property">id</span> === id) &#123;</span><br><span class="line">                list.<span class="property">done</span> = done;</span><br><span class="line">                <span class="keyword">return</span> list</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> list</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">lists</span>:newLists&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    deleteList = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> newLists = lists.<span class="title function_">filter</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list.<span class="property">id</span> !== id;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">lists</span>:newLists&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除已完成的任务</span></span><br><span class="line">    clearDone () &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> newLists = lists.<span class="title function_">filter</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list.<span class="property">done</span> === <span class="literal">false</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">lists</span>:newLists&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全选或全不选</span></span><br><span class="line">    choosenAll = <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> newLists = lists.<span class="title function_">map</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">            list.<span class="property">done</span> = done;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">lists</span>:newLists&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-wrap&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">HEADER</span> <span class="attr">choosenAll</span>=<span class="string">&#123;this.choosenAll&#125;</span> <span class="attr">addList</span>=<span class="string">&#123;this.addList&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MAIN</span> <span class="attr">lists</span>=<span class="string">&#123;this.state.lists&#125;</span> <span class="attr">updateList</span>=<span class="string">&#123;this.changeList&#125;</span> <span class="attr">deleteList</span>=<span class="string">&#123;this.deleteList&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">FOOTER</span> <span class="attr">choosenAll</span>=<span class="string">&#123;this.choosenAll&#125;</span> <span class="attr">lists</span>=<span class="string">&#123;this.state.lists&#125;</span> <span class="attr">clearDone</span>=<span class="string">&#123;this.clearDone.bind(this)&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HEADER</code>组件中的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HEADER</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  addObj = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;target,keyCode&#125; = event</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;请在输入框中输入内容&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> listObj = &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="title function_">nanoid</span>(),</span><br><span class="line">        <span class="attr">name</span>:target.<span class="property">value</span>,  </span><br><span class="line">        <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">addList</span>(listObj)</span><br><span class="line">      target.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// const &#123;value,&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">onKeyUp</span>=<span class="string">&#123;this.addObj&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的任务名称，按回车键确认&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MAIN</code>中间展示区域外部组件的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropsTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">ITEM</span> <span class="keyword">from</span> <span class="string">&#x27;../ITEM&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">MAIN</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title class_">PropsTypes</span> = &#123;</span><br><span class="line">        <span class="attr">lists</span>:<span class="title class_">PropsTypes</span>.<span class="property">array</span>.<span class="property">isRequired</span>,</span><br><span class="line">        <span class="attr">updateList</span>:<span class="title class_">PropsTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">        <span class="attr">deleteList</span>:<span class="title class_">PropsTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;lists,updateList,deleteList&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;</span></span><br><span class="line"><span class="language-xml">                lists.map(list =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                    return (</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">ITEM</span> <span class="attr">key</span>=<span class="string">&#123;list.id&#125;</span> &#123;<span class="attr">...list</span>&#125; <span class="attr">updateList</span>=<span class="string">&#123;updateList&#125;</span> <span class="attr">deleteList</span>=<span class="string">&#123;deleteList&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    )</span></span><br><span class="line"><span class="language-xml">                &#125;)</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">            </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ITEM</code>详情组件中的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ITEM</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">mouse</span>:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标移入移出时的操作</span></span><br><span class="line">    mouseMove = <span class="function">(<span class="params">flag</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">mouse</span>:flag&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改是否已完成</span></span><br><span class="line">    changeDone = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(id,event.<span class="property">target</span>.<span class="property">checked</span>);</span><br><span class="line">            <span class="comment">// console.log(this.props);</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">updateList</span>(id,event.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    deleteList (id) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;是否删除该项&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">deleteList</span>(id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;id,name,done&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123;mouse&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span> <span class="attr">mouse</span> ? &#x27;#<span class="attr">ddd</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">white</span>&#x27;&#125;&#125; <span class="attr">onMouseEnter</span>=<span class="string">&#123;this.mouseMove(true)&#125;</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.mouseMove(false)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;done&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.changeDone(id)&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;this.deleteList(id)&#125;&#125; className=&quot;btn btn-danger&quot; style=&#123;&#123;display: mouse ? &#x27;block&#x27; : &#x27;none&#x27;&#125;&#125;&gt;删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FOOTER</code>底部组件的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">FOOTER</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空所有已完成的任务</span></span><br><span class="line">  clearDone () &#123;</span><br><span class="line">    <span class="comment">// console.log(this.props);</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">clearDone</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//全选或全不选</span></span><br><span class="line">  choosenAll = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">choosenAll</span>(event.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;lists&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sum = lists.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> count = lists.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,list</span>) =&gt;</span> pre + (list.<span class="property">done</span> ? <span class="number">1</span> : <span class="number">0</span>),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;todo-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.choosenAll&#125;</span> <span class="attr">checked</span>=<span class="string">&#123;sum</span> === <span class="string">count</span> &amp; <span class="attr">sum</span> !== <span class="string">0</span> ? <span class="attr">true</span> <span class="attr">:</span> <span class="attr">false</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>已完成&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> / 全部&#123;sum&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.clearDone.bind(this)&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span>清除已完成任务<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>案例相关知识点：</strong></p><ol><li>拆分组件、实现静态组件，注意：<code>className</code>、<code>style</code>的写法</li><li>动态初始化列表，如何确定将数据放在哪个组件的state中？<ol><li>——某个组件使用：放在其自身的state中</li><li>——某些组件使用：放在他们共同的父组件state中（官方称此操作为：状态提升）</li></ol></li><li>关于父子之间通信：<ol><li>【父组件】给【子组件】传递数据：通过<code>props</code>传递</li><li>【子组件】给【父组件】传递数据：通过<code>props</code>传递，要求父提前给子传递一个函数</li></ol></li><li>注意：<code>defaultChecked</code>和<code>checked</code>的区别：<code>defaultValue</code>和<code>value</code></li><li>状态在哪里，操作状态的方法就放在哪里</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用create-react-app创建react应用&quot;&gt;&lt;a href=&quot;#使用create-react-app创建react应用&quot; class=&quot;headerlink&quot; title=&quot;使用create-react-app创建react应用&quot;&gt;&lt;/a&gt;使用cre</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>handleTree树状结构化数据</title>
    <link href="https://xuesenxu.github.io/posts/3bc6d510.html"/>
    <id>https://xuesenxu.github.io/posts/3bc6d510.html</id>
    <published>2022-09-15T07:06:33.000Z</published>
    <updated>2022-09-19T09:28:14.751Z</updated>
    
    <content type="html"><![CDATA[<p><strong>适用场景：</strong> 将后端传过来的数据转化为树状结构。<br>例如：将后端传过来的部门转化为树状结构的部门。</p><p>转化前部门数据：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28e3beb61ae74f7aad8907879ecaa544~tplv-k3u1fbpfcp-watermark.image?" alt="转换前部门数据.png"></p><p>转化后部门数据：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dafbc1085fcd411bbef187e3f4179488~tplv-k3u1fbpfcp-watermark.image?" alt="转化后的部门数据.png"></p><p>从这两组数据中我们可以看出，转化之前数组是扁平的数据，所有的部门都在同一个一维数组中。转化之后，所有的子部门都在父部门的<code>children</code>属性里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造树型结构数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; data 数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; id id字段 默认 &#x27;id&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; parentId 父节点字段 默认 &#x27;parentId&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; children 孩子节点字段 默认 &#x27;children&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleTree</span>(<span class="params">data, id, parentId, children</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> config = &#123;</span><br><span class="line">    <span class="attr">id</span>: id || <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    <span class="attr">parentId</span>: parentId || <span class="string">&#x27;parentId&#x27;</span>,</span><br><span class="line">    <span class="attr">childrenList</span>: children || <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> childrenListMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> nodeIds = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> tree = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将同一父元素的所有元素放在同一个数组中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> d <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;d&#x27;</span>,d[config.<span class="property">parentId</span>]);</span><br><span class="line">    <span class="keyword">let</span> parentId = d[config.<span class="property">parentId</span>];</span><br><span class="line">    <span class="keyword">if</span> (childrenListMap[parentId] == <span class="literal">null</span>) &#123;</span><br><span class="line">      childrenListMap[parentId] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    nodeIds[d[config.<span class="property">id</span>]] = d;</span><br><span class="line">    childrenListMap[parentId].<span class="title function_">push</span>(d);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将顶部元素放入tree数组中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> d <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> parentId = d[config.<span class="property">parentId</span>];</span><br><span class="line">    <span class="keyword">if</span> (nodeIds[parentId] == <span class="literal">null</span>) &#123;</span><br><span class="line">      tree.<span class="title function_">push</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//开始通过父元素寻找子元素并放入children属性中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> tree) &#123;</span><br><span class="line">    <span class="title function_">adaptToChildrenList</span>(t);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">adaptToChildrenList</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (childrenListMap[o[config.<span class="property">id</span>]] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      o[config.<span class="property">childrenList</span>] = childrenListMap[o[config.<span class="property">id</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o[config.<span class="property">childrenList</span>]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> o[config.<span class="property">childrenList</span>]) &#123;</span><br><span class="line">        <span class="title function_">adaptToChildrenList</span>(c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;适用场景：&lt;/strong&gt; 将后端传过来的数据转化为树状结构。&lt;br&gt;例如：将后端传过来的部门转化为树状结构的部门。&lt;/p&gt;
&lt;p&gt;转化前部门数据：&lt;br&gt;&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k</summary>
      
    
    
    
    <category term="js" scheme="https://xuesenxu.github.io/categories/js/"/>
    
    <category term="数据结构" scheme="https://xuesenxu.github.io/categories/js/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="js" scheme="https://xuesenxu.github.io/tags/js/"/>
    
    <category term="数据结构" scheme="https://xuesenxu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>时间戳转日期且格式化</title>
    <link href="https://xuesenxu.github.io/posts/a27093ab.html"/>
    <id>https://xuesenxu.github.io/posts/a27093ab.html</id>
    <published>2022-08-31T06:59:23.000Z</published>
    <updated>2022-09-19T09:28:14.799Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseTime</span>(<span class="params">time, pattern</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span> || !time) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> format = pattern || <span class="string">&#x27;&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> date</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    date = time</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> time === <span class="string">&#x27;string&#x27;</span>) &amp;&amp; (<span class="regexp">/^[0-9]+$/</span>.<span class="title function_">test</span>(time))) &#123;</span><br><span class="line">      time = <span class="built_in">parseInt</span>(time)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      time = time.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/-/gm</span>), <span class="string">&#x27;/&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27; &#x27;</span>).<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/\.[\d]&#123;3&#125;/gm</span>), <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> time === <span class="string">&#x27;number&#x27;</span>) &amp;&amp; (time.<span class="title function_">toString</span>().<span class="property">length</span> === <span class="number">10</span>)) &#123;</span><br><span class="line">      time = time * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(time)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">    <span class="attr">y</span>: date.<span class="title function_">getFullYear</span>(),</span><br><span class="line">    <span class="attr">m</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">d</span>: date.<span class="title function_">getDate</span>(),</span><br><span class="line">    <span class="attr">h</span>: date.<span class="title function_">getHours</span>(),</span><br><span class="line">    <span class="attr">i</span>: date.<span class="title function_">getMinutes</span>(),</span><br><span class="line">    <span class="attr">s</span>: date.<span class="title function_">getSeconds</span>(),</span><br><span class="line">    <span class="attr">a</span>: date.<span class="title function_">getDay</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> time_str = format.<span class="title function_">replace</span>(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, <span class="function">(<span class="params">result, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = formatObj[key]</span><br><span class="line">    <span class="comment">// Note: getDay() returns 0 on Sunday</span></span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;a&#x27;</span>) &#123; <span class="keyword">return</span> [<span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>][value] &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      value = <span class="string">&#x27;0&#x27;</span> + value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value || <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> time_str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="js" scheme="https://xuesenxu.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://xuesenxu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>若依前端实现权限管理</title>
    <link href="https://xuesenxu.github.io/posts/d163c52b.html"/>
    <id>https://xuesenxu.github.io/posts/d163c52b.html</id>
    <published>2022-08-29T07:09:57.000Z</published>
    <updated>2022-09-19T09:28:14.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在流行的前端框架很多，有若依、eladmin等框架，这些框架都是用于做后台管理的框架，既然是后台管理那么就会涉及到一个比较关键性的问题就是<strong>权限管理</strong>。</p><font color="red">什么是**权限管理**？</font><p>既然是后台管理登录的人的角色可能是超级管理员、管理员、以及普通用户或者有更多的层级角色，这些不同的角色登入后台管理系统左侧导航栏的显示是不同的，实现不同角色登录后台管理系统左侧的导航栏显示不同就是实现权限管理。<br><img src="https://img-blog.csdnimg.cn/68c21ef774ca4f2d8b73fad5e52b9453.png#pic_center" alt="在这里插入图片描述"></p><p>很多文章都写的是后端如何实现后台管理系统，以若依框架为例来说说前端是如何实现权限管理的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>将用户的权限字符存入数据库，当用户登录后根据用户的登录信息获取用户的所有信息（包括用户的权限信息）存入<code>Vuex</code>中。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户信息</span></span><br><span class="line"><span class="title class_">GetInfo</span>(&#123; commit, state &#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = res.<span class="property">user</span></span><br><span class="line">      <span class="keyword">const</span> avatar = (user.<span class="property">avatar</span> == <span class="string">&quot;&quot;</span> || user.<span class="property">avatar</span> == <span class="literal">null</span>) ? <span class="built_in">require</span>(<span class="string">&quot;@/assets/images/profile.jpg&quot;</span>) : user.<span class="property">avatar</span>;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">roles</span> &amp;&amp; res.<span class="property">roles</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// 验证返回的roles是否是一个非空数组</span></span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, res.<span class="property">roles</span>)</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_PERMISSIONS&#x27;</span>, res.<span class="property">permissions</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;SET_ROLES&#x27;</span>, [<span class="string">&#x27;ROLE_DEFAULT&#x27;</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_NAME&#x27;</span>, user.<span class="property">userName</span>)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_USER&#x27;</span>, user)</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;SET_AVATAR&#x27;</span>, avatar)</span><br><span class="line">      <span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>将路由分为<strong>公共路由</strong>和<strong>动态路由（基于用户权限动态去加载）</strong></p><p> 公共路由</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/redirect&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/redirect/:path(.*)&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">        <span class="keyword">import</span> (<span class="string">&#x27;@/views/redirect&#x27;</span>)</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 动态路由</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dynamicRoutes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">NavigationBar</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">permissions</span>: [<span class="string">&#x27;system:user:edit&#x27;</span>],</span><br><span class="line">        <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;system/user-auth&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Layout</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;role/:userId(\\d+)&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">                    <span class="title function_">import</span>(<span class="string">&#x27;@/views/system/user/authRole&#x27;</span>),</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;AuthRole&#x27;</span>,</span><br><span class="line">                <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;分配角色&#x27;</span>, <span class="attr">activeMenu</span>: <span class="string">&#x27;/system/user&#x27;</span> &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">NavigationBar</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">permissions</span>: [<span class="string">&#x27;system:role:edit&#x27;</span>],</span><br><span class="line">        <span class="attr">children</span>:[&#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;system/role-auth&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Layout</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;user/:roleId(\\d+)&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">                <span class="keyword">import</span> (<span class="string">&#x27;@/views/system/role/authUser&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;AuthUser&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;分配用户&#x27;</span>, <span class="attr">activeMenu</span>: <span class="string">&#x27;/system/role&#x27;</span> &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/system/dict-data&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">permissions</span>: [<span class="string">&#x27;system:dict:list&#x27;</span>],</span><br><span class="line">        <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;index/:dictId(\\d+)&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">                <span class="keyword">import</span> (<span class="string">&#x27;@/views/system/dict/data&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;Data&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;字典数据&#x27;</span>, <span class="attr">activeMenu</span>: <span class="string">&#x27;/system/dict&#x27;</span> &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/monitor/job-log&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">permissions</span>: [<span class="string">&#x27;monitor:job:list&#x27;</span>],</span><br><span class="line">        <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">                <span class="keyword">import</span> (<span class="string">&#x27;@/views/monitor/job/log&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;JobLog&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;调度日志&#x27;</span>, <span class="attr">activeMenu</span>: <span class="string">&#x27;/monitor/job&#x27;</span> &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/tool/gen-edit&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">permissions</span>: [<span class="string">&#x27;tool:gen:edit&#x27;</span>],</span><br><span class="line">        <span class="attr">children</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;index/:tableId(\\d+)&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">                <span class="keyword">import</span> (<span class="string">&#x27;@/views/tool/gen/editTable&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;GenEdit&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;修改生成配置&#x27;</span>, <span class="attr">activeMenu</span>: <span class="string">&#x27;/tool/gen&#x27;</span> &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> 从上面的代码中我们可以看出公共路由没有<code>permissions</code>字段，动态路由中有<code>permissions</code>字段。</p></li><li><p>根据用户权限中的<code>permissions</code>字段和<code>Vuex</code>中存储<code>permissions</code>字段判断当前登录的用户拥有哪些权限。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncRoutes = <span class="title function_">filterDynamicRoutes</span>(dynamicRoutes);</span><br><span class="line">router.<span class="title function_">addRoutes</span>(asyncRoutes);</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态路由遍历，验证是否具备权限</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">filterDynamicRoutes</span>(<span class="params">routes</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  routes.<span class="title function_">forEach</span>(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">permissions</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (auth.<span class="title function_">hasPermiOr</span>(route.<span class="property">permissions</span>)) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(route)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (route.<span class="property">roles</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (auth.<span class="title function_">hasRoleOr</span>(route.<span class="property">roles</span>)) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(route)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证用户是否含有指定权限，只需包含其中一个</span></span><br><span class="line"><span class="title function_">hasPermiOr</span>(<span class="params">permissions</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> permissions.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">authPermission</span>(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">authPermission</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> all_permission = <span class="string">&quot;*:*:*&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> permissions = store.<span class="property">getters</span> &amp;&amp; store.<span class="property">getters</span>.<span class="property">permissions</span></span><br><span class="line">  <span class="keyword">if</span> (permission &amp;&amp; permission.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> permissions.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> all_permission === v || v === permission</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在流行的前端框架很多，有若依、eladmin等框架，这些框架都是用于做后台管理的框架，既然是后台管理那么就会涉及到一个比较关键性的问题就是</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
    <category term="ruoyi" scheme="https://xuesenxu.github.io/tags/ruoyi/"/>
    
  </entry>
  
  <entry>
    <title>Vue——video标签实现不静音自动播放</title>
    <link href="https://xuesenxu.github.io/posts/d63a8feb.html"/>
    <id>https://xuesenxu.github.io/posts/d63a8feb.html</id>
    <published>2022-08-25T02:31:20.000Z</published>
    <updated>2022-09-19T09:28:14.745Z</updated>
    
    <content type="html"><![CDATA[<p>由于浏览器厂商为了提高用户体验禁止<code>video</code>标签可以有声的自动播放，也就是说如果想让<code>video</code>标签能够自动播放必须给<code>video</code>标签添加<code>muted</code>属性。</p><p>但是在开发的过程中我们需要用视频自动有声播放，比如一些学习网站，需要老师或同学进入页面就可以播放学习视频，那么如何去实现呢？</p><p>我是在Vue框架下实现的，其他框架仅供参考。</p><p>首先我们要让<code>video</code>标签能够自动播放，也就是让<code>video</code>标签静音条件下自动播放。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;videoPlayer&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;videoPlayer&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;video&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">autoplay</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">muted</span></span></span><br><span class="line"><span class="tag">  <span class="attr">controls</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:src</span>=<span class="string">&quot;addPre()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是我们通过JavaScript的方式让<code>video</code>标签先取消静音然后再自动播放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">videoPlayer</span>.<span class="property">muted</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">videoPlayer</span>.<span class="title function_">play</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此方法我只在Vue框架下尝试可以，在其他框架没有尝试。</p><p>此方法还需要注意的一点是如果此方法所在页面刷新或是从其他网站直接跳转到此页面则此方法就不管用了。</p><p>如果是刷新或者是外部链接跳转到此则会报如下错误：</p><font color="red">Uncaught (in promise) DOMException: play() failed because the user didn't interact with the document first. </font><p>这个错误的意思是：<font color="red">play() 失败，因为用户没有先与文档交互。</font></p><p>使用<code>play</code>方法之前用户必须得和文档（也就是页面进行）交互，刷新和从外部链接跳转都没有与页面进行交互。但是在Vue项目中从一个路由页面跳转到视频播放页面是可以的，这是为什么呢？</p><p>因为Vue是单页面富应用，虽然我们看上去页面是从一个页面跳转到另一个页面但是这些路由页面始终在同一个文档（页面）中，当我们点击实现路由跳转时就已经实现了与文档交互，所以不会报上面的错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于浏览器厂商为了提高用户体验禁止&lt;code&gt;video&lt;/code&gt;标签可以有声的自动播放，也就是说如果想让&lt;code&gt;video&lt;/code&gt;标签能够自动播放必须给&lt;code&gt;video&lt;/code&gt;标签添加&lt;code&gt;muted&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;但是</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>原型和原型链</title>
    <link href="https://xuesenxu.github.io/posts/139b1e40.html"/>
    <id>https://xuesenxu.github.io/posts/139b1e40.html</id>
    <published>2022-08-08T00:59:57.000Z</published>
    <updated>2022-09-19T09:28:14.780Z</updated>
    
    <content type="html"><![CDATA[<p>引用类型有如下四个规则：</p><h2 id="规则一"><a href="#规则一" class="headerlink" title="规则一"></a>规则一</h2><p>引用类型，都具有对象特性，即可自由扩展属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">arr.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">fn.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">a</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="规则二"><a href="#规则二" class="headerlink" title="规则二"></a>规则二</h2><p>引用类型，都有一个隐式原型 <code>__proto__</code> 属性，属性值是一个普通的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj.__proto__&#x27;</span>, obj.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arr.__proto__&#x27;</span>, arr.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn.__proto__&#x27;</span>, fn.<span class="property">__proto__</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0c74a23cb88e4243bbeb0fee65194b10.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f04c2a2233794f8a8d5be74d1c930870.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/26668da12b9b47348467b8d704707e06.png" alt="在这里插入图片描述"></p><h2 id="规则三"><a href="#规则三" class="headerlink" title="规则三"></a>规则三</h2><p>引用类型，隐式原型 <code>__proto__</code> 的属性值指向它的构造函数的显式原型 <code>prototype</code> 属性值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line">arr.<span class="property">__proto__</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br><span class="line">fn.<span class="property">__proto__</span> == <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="规则四"><a href="#规则四" class="headerlink" title="规则四"></a>规则四</h2><p>当你试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么它会去它的隐式原型 <code>__proto__</code>（也就是它的构造函数的显式原型 <code>prototype</code>）中寻找：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>:<span class="number">1</span> &#125;</span><br><span class="line">obj.<span class="property">toString</span></span><br><span class="line"><span class="comment">// ƒ toString() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>首先， <code>obj</code> 对象并没有 <code>toString</code> 属性，之所以能获取到 <code>toString</code> 属性，是遵循了第四条规则，从它的构造函数 <code>Object</code> 的 <code>prototype</code> 里去获取。</p><h2 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span> <span class="comment">// 其实这行可以不写，默认返回 this 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nick = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;nick&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nick.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">//打印的结果为：[object Object]</span></span><br></pre></td></tr></table></figure><p>这里就引出 原型链 的概念了， <code>nick</code> 实例先从自身出发检讨自己，发现并没有 <code>toString</code> 方法。找不到，就往上走，找 <code>Person</code> 构造函数的 <code>prototype</code> 属性，还是没找到。构造函数的 <code>prototype</code> 也是一个对象嘛，那对象的构造函数是 <code>Object</code> ，所以就找到了 <code>Object.prototype</code> 下的 <code>toString</code> 方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span> <span class="comment">// 其实这行可以不写，默认返回 this 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nick = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;nick&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><br>打印结果如下：<br><img src="https://img-blog.csdnimg.cn/41e8376a5d244938a7d82bc42e7ff75e.png" alt="在这里插入图片描述"><br><strong>注意：</strong>当我们往对象的<code>__proto__</code>属性中添加属性时，对象的<code>__proto__</code>属性仍会指向构造函数的<code>prototype</code>属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span> <span class="comment">// 其实这行可以不写，默认返回 this 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nick = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;nick&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>,nick.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line">nick.<span class="property">__proto__</span>.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>,nick.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p>打印结果如下：<br><img src="https://img-blog.csdnimg.cn/8de464d6b2de4612ab64161f46155ae5.png" alt="在这里插入图片描述"></p><h2 id="图片描述原型和原型链"><a href="#图片描述原型和原型链" class="headerlink" title="图片描述原型和原型链"></a>图片描述原型和原型链</h2><p><img src="https://img-blog.csdnimg.cn/41a3637424d74d2e8f1ea0c7ad748f94.jpeg" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过四个特性、一个例子、一张图片、一个方法，大家应该对原型和原型链的关系有了大概的认知。我的认知就是，原型链就是一个过程，原型是原型链这个过程中的一个单位，贯穿整个原型链。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用类型有如下四个规则：&lt;/p&gt;
&lt;h2 id=&quot;规则一&quot;&gt;&lt;a href=&quot;#规则一&quot; class=&quot;headerlink&quot; title=&quot;规则一&quot;&gt;&lt;/a&gt;规则一&lt;/h2&gt;&lt;p&gt;引用类型，都具有对象特性，即可自由扩展属性：&lt;/p&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    <category term="js高级" scheme="https://xuesenxu.github.io/categories/js%E9%AB%98%E7%BA%A7/"/>
    
    
    <category term="js高级" scheme="https://xuesenxu.github.io/tags/js%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>双指针（一）</title>
    <link href="https://xuesenxu.github.io/posts/57678ad9.html"/>
    <id>https://xuesenxu.github.io/posts/57678ad9.html</id>
    <published>2022-07-18T01:31:15.000Z</published>
    <updated>2022-09-19T09:28:14.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><p><em><a href="https://leetcode.cn/problems/linked-list-cycle/">力扣题目链接</a></em></p><p><strong>题目描述：</strong></p><blockquote><p>给你一个链表的头节点 head ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</em></p><p><strong>示例1：</strong></p><p><img src="https://img-blog.csdnimg.cn/b4b02aab13f74c9bb8da09789b560b89.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [3,2,0,-4], pos = 1</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><p><img src="https://img-blog.csdnimg.cn/959c7a4968604c0e981978b3f46f47d2.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1,2], pos = 0</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1], pos = -1</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>链表中节点的数目范围是 <code>[0, 104]</code></li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 有效索引 。</li></ul></blockquote><p><strong>解题思路：</strong></p><p>使用快慢指针，让慢指针每次移动一个节点，让快指针每次移动两个节点，如果他们能够相遇则说明有环，如果不能相遇则没有环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="comment">//如果是空或者只有一个节点则直接返回false</span></span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fastList = head.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">var</span> slowList = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当快指针为空或者快指针的下一个节点为空时结束循环</span></span><br><span class="line">    <span class="keyword">while</span>(fastList !== <span class="literal">null</span> &amp;&amp; fastList.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fastList.<span class="property">val</span>);</span><br><span class="line">      <span class="keyword">if</span>(fastList === slowList) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      fastList = fastList.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">      slowList = slowList.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h3><p><em><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">力扣题目链接</a></em></p><p><strong>题目描述：</strong></p><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 <code>0</code> 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>不允许修改 链表。</p><blockquote><p><strong>示例1：</strong></p><p><img src="https://img-blog.csdnimg.cn/165d89c44b0043d188a9226d25995cd7.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><p><img src="https://img-blog.csdnimg.cn/7441fb648a4047f9affc8a40f0f6ea93.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><p><img src="https://img-blog.csdnimg.cn/8db8d98017b140c89acccd5fb8d679d8.png" alt=""></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>链表中节点的数目范围在范围 [0, 104] 内</li><li>-105 &lt;= Node.val &lt;= 105</li><li>pos 的值为 -1 或者链表中的一个有效索引</li></ul></blockquote><p><strong>解题思路：</strong></p><h4 id="方法一：给每个节点添加一个属性"><a href="#方法一：给每个节点添加一个属性" class="headerlink" title="方法一：给每个节点添加一个属性"></a>方法一：给每个节点添加一个属性</h4><p>由于<code>JavaScript</code>语言的特性，我们可以随时给每一个对象添加一个属性，我们在遍历链表时给每一个对象都添加一个属性，如果是循环链表则在遇到进入循环的第一个节点时已经有了该属性就可以直接返回该节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (head.<span class="property">t</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      head.<span class="property">t</span> = <span class="number">2</span>;</span><br><span class="line">      head = head.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="方法二：快慢双指针"><a href="#方法二：快慢双指针" class="headerlink" title="方法二：快慢双指针"></a>方法二：快慢双指针</h4><p>我们使用两个指针，<code>fast</code> 与 <code>slow</code>。它们起始都位于链表的头部。随后，<code>slow</code> 指针每次向后移动一个位置，而 <code>fast</code> 指针向后移动两个位置。如果链表中存在环，则 <code>fast</code> 指针最终将再次与 <code>slow</code> 指针在环中相遇。</p><p><img src="https://img-blog.csdnimg.cn/9063d50a71374a11a3b8099494474d94.jpeg" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-KT82odRS-1658107409936)(../../images/环形链表II题解.jpeg)\]"></p><p>看上图，当快指针与慢指针相遇时快指针走的节点数是是慢指针走的节点数的2倍，而多出来的一倍正好是一个环，所以慢指针从<code>head</code>走到相遇点的节点数刚好与环的节点数相等，假设从起始点到相遇点的节点数为<code>m</code>，环的节点数为<code>k</code>则从从<code>head</code>节点到起始点的距离为<code>k-m</code>,从相遇点继续向前再次到达起始点的节点数也为<code>k-m</code>所以，当快慢指针相遇之后从新定义一个节点让它指向起始节点，然后让慢指针和这个新指针同时向前移动，每次循环移动一个节点，当他俩再次相遇时则是环起点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> slowList = head;</span><br><span class="line">  <span class="keyword">let</span> fastList = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (fastList !== <span class="literal">null</span>) &#123;</span><br><span class="line">    slowList = slowList.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">if</span> (fastList.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      fastList = fastList.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fastList === slowList) &#123;</span><br><span class="line">      <span class="keyword">let</span> fir = head;</span><br><span class="line">      <span class="keyword">while</span> (fir !== slowList) &#123;</span><br><span class="line">        fir = fir.<span class="property">next</span>;</span><br><span class="line">        slowList = slowList.<span class="property">next</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fir;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h3><p><em><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">力扣题目链接</a></em></p><p><strong>题目描述：</strong></p><blockquote><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不<br>存在相交节点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><img src="https://img-blog.csdnimg.cn/f8a144f580c04d4a8821f942206e215f.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-yEgVMlJH-1658107409936)(../../images/相交链表题目描述.png)\]"></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p></blockquote><p><strong>解题思路：</strong></p><p>只有当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，两个链表才可能相交。因此首先判断链表 <code>headA</code> 和 <code>headB</code> 是否为空，如果其中至少有一个链表为空，则两个链表一定不相交，返回 <code>null</code>。</p><p>当链表 <code>headA</code> 和 <code>headB</code> 都不为空时，创建两个指针 <code>a</code> 和 <code>b</code>，初始时分别指向两个链表的头节点 <code>headA</code> 和 <code>headB</code>，然后将两个指针依次遍历两个链表的每个节点。具体做法如下：</p><ul><li>每步操作需要同时更新<code>a</code>和<code>b</code></li><li>如果两个指针都不为空，则将两个指针移到下一个节点</li><li>如果指针<code>a</code>节点为空，则将<code>a</code>移到<code>headB</code>的头节点；如果<code>b</code>节点为空，则将<code>b</code>移动到链表<code>headB</code>的头节点</li></ul><p>可能会有人问这样做是怎么做到找到相同节点的，以及如果没有相交是如何返回<code>null</code>的，以及会不会造成死循环。</p><p>分两种情况，两个链表的长度相同和不相同。</p><ul><li>两个链表长度相同时，如果相交则返回相交点，如果不相交则会在每个链表的结尾处等于<code>null</code>，此时都等于<code>null</code>两个链表也就相等了，此时返回<code>null</code>。</li><li>两个链表长度不相等，如果相交，则在两个指针遍历完本链表以及对方链表不相等的地方之后会在相交支出相遇，如果不相交会在两个指针遍历完两个链表之后同时为<code>null</code>，此时返回<code>null</code>即可。<br>  <img src="https://img-blog.csdnimg.cn/d0b54c51b34e477dba1704c7ef4d03f0.jpeg" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2NNAIlWS-1658107409937)(../../images/相交链表讲解.jpeg)\]"></li></ul><p>可能还会有人问，为什么遍历两个链表之后两个指针一定会在交点相遇或者说，一定会在同时到达链表的尾部为<code>null</code>呢？</p><p>由于指针遍历两个链表，当两个链表相交时，两个链表相交的部分的长度是相同的，指针遍了一个链表之后两个指针的所走的长度都是两个不同的部分加相同的部分，所以会在相交点相遇；如果两个链表不相交两个指针最终所走的长度就是两个链表的总长度。</p><h3 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a>删除链表的倒数第 N 个结点</h3><p><em><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">力扣题目链接</a></em></p><blockquote><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p><strong>示例1：</strong></p><p><img src="https://img-blog.csdnimg.cn/d56152632c9146de9848f7aadd2d0e20.jpeg" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-K62WESff-1658107409937)(../../images/删除链表的倒数第%20N%20个结点示例1.jpg)\]"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="built_in">head</span> = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>解题思路：</strong><br>利用快慢双指针，让快指针从头结点的前一个节点开始先走<code>n</code>个节点，然后再让慢指针从头结点的前一个节点开始与快指针同时前进当快指针的下一个节点为空时满指针的下一个节点节点结尾要删除的节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> preHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fast = preHead;</span><br><span class="line">  <span class="keyword">var</span> slow = preHead;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">    fast = fast.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (fast.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    fast = fast.<span class="property">next</span>;</span><br><span class="line">    slow = slow.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">  <span class="keyword">return</span> preHead.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://leetcode.cn/problems/linked-list-cycle/&quot;&gt;</summary>
      
    
    
    
    <category term="js" scheme="https://xuesenxu.github.io/categories/js/"/>
    
    <category term="链表" scheme="https://xuesenxu.github.io/categories/js/%E9%93%BE%E8%A1%A8/"/>
    
    
    <category term="js" scheme="https://xuesenxu.github.io/tags/js/"/>
    
    <category term="算法" scheme="https://xuesenxu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://xuesenxu.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue.config.js配置详解</title>
    <link href="https://xuesenxu.github.io/posts/eb6b9244.html"/>
    <id>https://xuesenxu.github.io/posts/eb6b9244.html</id>
    <published>2022-06-23T07:39:32.000Z</published>
    <updated>2022-09-19T09:28:14.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。你也可以使用 <code>package.json</code> 中的 <code>vue</code> 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p><p>这个文件应该导出一个包含了选项的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;@vue/cli-service&#x27;).ProjectOptions</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 选项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，你也可以使用 <code>@vue/cli-service</code> 提供的 <code>defineConfig</code> 帮手函数，以获得更好的类型提示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a><code>publicPath</code></h2><ul><li>Type：<code>string</code></li><li>Default：<code>/</code></li></ul><p>由于在<code>Vue CLI 3.3</code>之后<code>baseUrl</code>已被弃用，使用<code>publicPath</code>进行替代。</p><p>默认情况下，<code>Vue CLI</code> 会假设你的应用是被部署在一个域名的根路径上，例如 <code>https://www.my-app.com/</code>，此时<code>publicPath</code>的值为<code>/</code>如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p><h3 id="相对-publicPath-的限制"><a href="#相对-publicPath-的限制" class="headerlink" title="相对 publicPath 的限制"></a>相对 <code>publicPath</code> 的限制</h3><blockquote><p>相对路径的 <code>publicPath</code> 有一些使用上的限制。在以下情况下，应当避免使用相对 <code>publicPath</code>:</p><ul><li>当使用基于 HTML5 <code>history.pushState</code> 的路由时；</li><li>当使用 <code>pages</code> 选项构建多页面应用时。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/admin/&#x27;</span> : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="outputDir"><a href="#outputDir" class="headerlink" title="outputDir"></a><code>outputDir</code></h2><ul><li>Type: <code>string</code></li><li>Default: <code>&#39;dist&#39;</code></li></ul><p>在<code>Vue</code>的项目中当运行<code>npm run build</code>对项目进行生产环境打包时生成的文件夹通常命名为<code>dist</code>可以通过更改此配置来更改文件夹的名称</p><blockquote><p><strong>提示</strong></p><p>请始终使用 <code>outputDir</code> 而不要修改 webpack 的 <code>output.path</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="assetsDir"><a href="#assetsDir" class="headerlink" title="assetsDir"></a><code>assetsDir</code></h2><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>&#39;&#39;</code></p><p>放置生成的静态资源 (<code>js</code>、<code>css</code>、<code>img</code>、<code>fonts</code>) 的 (相对于 <code>outputDir</code> 的) 目录。</p></li></ul><blockquote><p><strong>提示</strong></p><p>从生成的资源覆写 <code>filename</code> 或 <code>chunkFilename</code> 时，<code>assetsDir</code> 会被忽略。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;static&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexPath"><a href="#indexPath" class="headerlink" title="indexPath"></a><code>indexPath</code></h2><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>&#39;index.html&#39;</code></p><p>指定生成的 <code>index.html</code> 的输出路径 (相对于 <code>outputDir</code>)。也可以是一个绝对路径。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">assetsDir</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filenameHashing"><a href="#filenameHashing" class="headerlink" title="filenameHashing"></a><code>filenameHashing</code></h2><ul><li><p>Type: <code>boolean</code></p></li><li><p>Default: <code>true</code></p><p>默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。然而，这也要求 index 的 HTML 是被 Vue CLI 自动生成的。如果你无法使用 Vue CLI 生成的 index HTML，你可以通过将这个选项设为 <code>false</code> 来关闭文件名哈希。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">filenameHashing</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a><code>pages</code></h2><ul><li><p>Type: <code>Object</code></p></li><li><p>Default: <code>undefined</code></p><p>在 multi-page 模式下构建应用。每个“page”应该有一个对应的 JavaScript 入口文件。其值应该是一个对象，对象的 key 是入口的名字，value 是：</p><ul><li>一个指定了 <code>entry</code>, <code>template</code>, <code>filename</code>, <code>title</code> 和 <code>chunks</code> 的对象 (除了 <code>entry</code> 之外都是可选的)；</li><li>或一个指定其 <code>entry</code> 的字符串。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/index/main.js&#x27;</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 在 dist/index.html 的输出</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 当使用 title 选项时， </span></span><br><span class="line">      <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Index Page&#x27;</span>,</span><br><span class="line">      <span class="comment">// 在这个页面中包含的块，默认情况下会包含</span></span><br><span class="line">      <span class="comment">// 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;chunk-vendors&#x27;</span>, <span class="string">&#x27;chunk-common&#x27;</span>, <span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当使用只有入口的字符串格式时，</span></span><br><span class="line">    <span class="comment">// 模板会被推导为 `public/subpage.html`</span></span><br><span class="line">    <span class="comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class="line">    <span class="comment">// 输出文件名会被推导为 `subpage.html`。</span></span><br><span class="line">    <span class="attr">subpage</span>: <span class="string">&#x27;src/subpage/main.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong></p><p>当在 multi-page 模式下构建时，webpack 配置会包含不一样的插件 (这时会存在多个 <code>html-webpack-plugin</code> 和 <code>preload-webpack-plugin</code> 的实例)。如果你试图修改这些插件的选项，请确认运行 <code>vue inspect</code>。</p></blockquote><h2 id="lintOnSave"><a href="#lintOnSave" class="headerlink" title="lintOnSave"></a><code>lintOnSave</code></h2><ul><li>Type: <code>boolean</code> | <code>&#39;warning&#39;</code> | <code>&#39;default&#39;</code> | <code>&#39;error&#39;</code></li><li>Default: <code>&#39;default&#39;</code></li></ul><p>检验语法规范，只有当安装了<a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint"><code>@vue/cli-plugin-eslint</code></a>之后才会生效。</p><p>设置为 <code>true</code> 或 <code>&#39;warning&#39;</code> 时，<code>eslint-loader</code> 会将 lint 错误输出为编译警告。默认情况下，警告仅仅会被输出到命令行，且不会使得编译失败。</p><p>如果你希望让 lint 错误在开发时直接显示在浏览器中，你可以使用 <code>lintOnSave: &#39;default&#39;</code>。这会强制 <code>eslint-loader</code> 将 lint 错误输出为编译错误，同时也意味着 lint 错误将会导致编译失败。</p><p>设置为 <code>error</code> 将会使得 <code>eslint-loader</code> 把 lint 警告也输出为编译错误，这意味着 lint 警告将会导致编译失败。</p><p>或者，你也可以通过设置让浏览器 overlay 同时显示警告和错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">overlay</span>: &#123;</span><br><span class="line">      <span class="attr">warnings</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">errors</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>lintOnSave</code> 是一个 truthy 的值时，<code>eslint-loader</code> 在开发和生产构建下都会被启用。如果你想要在生产构建时禁用 <code>eslint-loader</code>，你可以用如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">lintOnSave</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtimeCompiler"><a href="#runtimeCompiler" class="headerlink" title="runtimeCompiler"></a><code>runtimeCompiler</code></h2><ul><li><p>Type: <code>boolean</code></p></li><li><p>Default: <code>false</code></p><p>是否使用包含运行时编译器的 <code>Vue</code> 构建版本。设置为 <code>true</code> 后你就可以在 <code>Vue</code> 组件中使用 <code>template</code> 选项了，但是这会让你的应用额外增加 10kb 左右。</p></li></ul><h2 id="transpileDependencies"><a href="#transpileDependencies" class="headerlink" title="transpileDependencies"></a><code>transpileDependencies</code></h2><ul><li><p>Type: <code>boolean | Array&lt;string | RegExp&gt;</code></p></li><li><p>Default: <code>false</code></p><p>默认情况下 <code>babel-loader</code> 会忽略所有 <code>node_modules</code> 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖。</p><p>不过，对所有的依赖都进行转译可能会降低构建速度。如果对构建性能有所顾虑，你可以只转译部分特定的依赖：给本选项传一个数组，列出需要转译的第三方包包名或正则表达式即可。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: [</span><br><span class="line">    <span class="string">&#x27;vue-echarts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;resize-detector&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="productionSourceMap"><a href="#productionSourceMap" class="headerlink" title="productionSourceMap"></a><code>productionSourceMap</code></h2><ul><li><p>Type: <code>boolean</code></p></li><li><p>Default: <code>true</code></p><p>如果你不需要生产环境的 source map，可以将其设置为 <code>false</code> 以加速生产环境构建。</p></li></ul><h2 id="crossorigin"><a href="#crossorigin" class="headerlink" title="crossorigin"></a><code>crossorigin</code></h2><ul><li><p>Type: <code>string</code></p></li><li><p>Default: <code>undefined</code></p><p>设置生成的 HTML 中 <code>&lt;link rel=&quot;stylesheet&quot;&gt;</code> 和 <code>&lt;script&gt;</code> 标签的 <code>crossorigin</code> 属性。</p><p>需要注意的是该选项仅影响由 <code>html-webpack-plugin</code> 在构建时注入的标签 - 直接写在模版 (<code>public/index.html</code>) 中的标签不受影响。</p><p>更多细节可查阅: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_settings_attributes">CORS settings attributes</a></p></li></ul><h2 id="configureWebpack"><a href="#configureWebpack" class="headerlink" title="configureWebpack"></a><code>configureWebpack</code></h2><ul><li><p>Type: <code>Object | Function</code></p><p>如果这个值是一个对象，则会通过 <a href="https://github.com/survivejs/webpack-merge">webpack-merge</a> 合并到最终的配置中。</p><p>如果这个值是一个函数，则会接收被解析的配置作为参数。该函数既可以修改配置并不返回任何东西，也可以返回一个被克隆或合并过的配置版本。</p></li></ul><h3 id="对象形式"><a href="#对象形式" class="headerlink" title="对象形式"></a>对象形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>:&#123;</span><br><span class="line">       <span class="attr">resolve</span>: &#123;</span><br><span class="line">           <span class="comment">// 别名配置</span></span><br><span class="line">            <span class="attr">alias</span>: &#123;</span><br><span class="line">              <span class="string">&#x27;assets&#x27;</span>: <span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;common&#x27;</span>: <span class="string">&#x27;@/common&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;components&#x27;</span>: <span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;configs&#x27;</span>: <span class="string">&#x27;@/configs&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;views&#x27;</span>: <span class="string">&#x27;@/views&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;plugins&#x27;</span>: <span class="string">&#x27;@/plugins&#x27;</span>,</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象形式可以为某些特定文件夹区别名</p><p>也可以写成如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">  <span class="comment">//在webpack的name字段中提供应用的标题，这样就可以在index.html中访问它来注入正确的标题。</span></span><br><span class="line">  <span class="attr">name</span>: name,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@crud&#x27;</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/components/Crud&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>:</span><br><span class="line">       <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">               <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">               config.<span class="property">mode</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">               config.<span class="property">mode</span> = <span class="string">&#x27;development&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 开发生产共同配置别名</span></span><br><span class="line">           <span class="title class_">Object</span>.<span class="title function_">assign</span>(config.<span class="property">resolve</span>, &#123;</span><br><span class="line">                   <span class="attr">alias</span>: &#123;</span><br><span class="line">                       <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;assets&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/assets&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;common&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/common&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;components&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/components&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;network&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/network&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;configs&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/configs&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;views&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/views&#x27;</span>),</span><br><span class="line">                       <span class="string">&#x27;plugins&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/plugins&#x27;</span>),</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="chainWebpack"><a href="#chainWebpack" class="headerlink" title="chainWebpack"></a><code>chainWebpack</code></h2><ul><li><p>Type: <code>Function</code></p><p>是一个函数，会接收一个基于 <a href="https://github.com/mozilla-neutrino/webpack-chain">webpack-chain</a> 的 <code>ChainableConfig</code> 实例。允许对内部的 webpack 配置进行更细粒度的修改。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">chainWebpack</span>:<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;preload&#x27;</span>); <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line">config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>); <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span>=&gt;</span>&#123;</span><br><span class="line">args[<span class="number">0</span>].<span class="property">title</span>=name</span><br><span class="line"><span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">      config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">          .<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>,<span class="title function_">resolve</span>(<span class="string">&#x27;./src&#x27;</span>))</span><br><span class="line">          .<span class="title function_">set</span>(<span class="string">&#x27;components&#x27;</span>,<span class="title function_">resolve</span>(<span class="string">&#x27;./src/components&#x27;</span>))</span><br><span class="line">          .<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,<span class="title function_">resolve</span>(<span class="string">&#x27;./src/views&#x27;</span>))</span><br><span class="line">          .<span class="title function_">set</span>(<span class="string">&#x27;assets&#x27;</span>,<span class="title function_">resolve</span>(<span class="string">&#x27;./src/assets&#x27;</span>))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chainWebpack</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//下面两行代码是移除preload（预载） 与 prefetch （预取）</span></span><br><span class="line">  <span class="comment">//vue 脚手架默认开启了 preload 与 prefetch，当我们项目很大时，这个就成了首屏加载的最大元凶了。</span></span><br><span class="line">  <span class="comment">//先简单了解一下 preload 与 prefetch。</span></span><br><span class="line">    <span class="comment">//preload 与 prefetch 都是一种资源预加载机制；</span></span><br><span class="line">    <span class="comment">//preload 是预先加载资源，但并不执行，只有需要时才执行它；</span></span><br><span class="line">    <span class="comment">//prefetch 是意图预获取一些资源，以备下一个导航/页面使用；</span></span><br><span class="line">    <span class="comment">//preload 的优先级高于 prefetch。</span></span><br><span class="line">  config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;preload&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line">  config.<span class="property">plugins</span>.<span class="title function_">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>) <span class="comment">// <span class="doctag">TODO:</span> need test</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set svg-sprite-loader</span></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">    .<span class="property">exclude</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/icons&#x27;</span>))</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;icons&#x27;</span>)</span><br><span class="line">    .<span class="title function_">test</span>(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">    .<span class="property">include</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/assets/icons&#x27;</span>))</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">options</span>(&#123;</span><br><span class="line">      <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[name]&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set preserveWhitespace</span></span><br><span class="line">  config.<span class="property">module</span></span><br><span class="line">    .<span class="title function_">rule</span>(<span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line">    .<span class="title function_">use</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">loader</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line">    .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">      options.<span class="property">compilerOptions</span>.<span class="property">preserveWhitespace</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> options</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">end</span>()</span><br><span class="line"></span><br><span class="line">  config</span><br><span class="line">    <span class="comment">// https://webpack.js.org/configuration/devtool/#development</span></span><br><span class="line">    .<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">config</span> =&gt;</span> config.<span class="title function_">devtool</span>(<span class="string">&#x27;cheap-source-map&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  config</span><br><span class="line">    .<span class="title function_">when</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config</span><br><span class="line">          .<span class="title function_">plugin</span>(<span class="string">&#x27;ScriptExtHtmlWebpackPlugin&#x27;</span>)</span><br><span class="line">          .<span class="title function_">after</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">          .<span class="title function_">use</span>(<span class="string">&#x27;script-ext-html-webpack-plugin&#x27;</span>, [&#123;</span><br><span class="line">          <span class="comment">// `runtime` must same as runtimeChunk name. default is `runtime`</span></span><br><span class="line">            <span class="attr">inline</span>: <span class="regexp">/runtime\..*\.js$/</span></span><br><span class="line">          &#125;])</span><br><span class="line">          .<span class="title function_">end</span>()</span><br><span class="line">        config</span><br><span class="line">          .<span class="property">optimization</span>.<span class="title function_">splitChunks</span>(&#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">              <span class="attr">libs</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;chunk-libs&#x27;</span>,</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span> <span class="comment">// only package third parties that are initially dependent</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">elementUI</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;chunk-elementUI&#x27;</span>, <span class="comment">// split elementUI into a single package</span></span><br><span class="line">                <span class="attr">priority</span>: <span class="number">20</span>, <span class="comment">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]_?element-ui(.*)/</span> <span class="comment">// in order to adapt to cnpm</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">commons</span>: &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;chunk-commons&#x27;</span>,</span><br><span class="line">                <span class="attr">test</span>: <span class="title function_">resolve</span>(<span class="string">&#x27;src/components&#x27;</span>), <span class="comment">// can customize your rules</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">3</span>, <span class="comment">//  minimum common number</span></span><br><span class="line">                <span class="attr">priority</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        config.<span class="property">optimization</span>.<span class="title function_">runtimeChunk</span>(<span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a><code>devServer</code></h2><ul><li><p>Type: <code>Object</code></p><p><a href="https://webpack.js.org/configuration/dev-server/">所有 <code>webpack-dev-server</code> 的选项</a>都支持。注意：</p><ul><li>有些值像 <code>host</code>、<code>port</code> 和 <code>https</code> 可能会被命令行参数覆写。</li><li>有些值像 <code>publicPath</code> 和 <code>historyApiFallback</code> 不应该被修改，因为它们需要和开发服务器的 <a href="https://cli.vuejs.org/zh/config/#publicpath">publicPath</a> 同步以保障正常的工作。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// host: &#x27;localhost&#x27;,</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8090</span>, <span class="comment">//项目运行的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="devServer-proxy"><a href="#devServer-proxy" class="headerlink" title="devServer.proxy"></a><code>devServer.proxy</code></h3><ul><li><p>Type: <code>string | Object</code></p><p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 <code>vue.config.js</code> 中的 <code>devServer.proxy</code> 选项来配置。</p><p><code>devServer.proxy</code> 可以是一个指向开发环境 API 服务器的字符串：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// host: &#x27;localhost&#x27;,</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8090</span>, <span class="comment">//项目运行的端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/opAdmin&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://116.66.65.193:8081&quot;</span>, <span class="comment">//对应服务端的接口地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 开启跨域</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/opAdmin&quot;</span>: <span class="string">&quot;/opAdmin&quot;</span> <span class="comment">//将以 /opAdmin 开头的接口重写http://116.66.65.193:8081/opAdmin ,调用时直接以 /opAdmin开头即表示调用http://116.66.65.193:8081/opAdmin</span></span><br><span class="line">          <span class="comment">// &quot;^/opAdmin&quot;: &quot;/&quot; //将以 /opAdmin 开头的接口重写http://116.66.65.193:8081/ ,调用时直接以 /opAdmin开头即表示调用http://116.66.65.193:8081/</span></span><br><span class="line">          <span class="comment">// &quot;^/opAdmin&quot;: &quot;&quot; //将以 /opAdmin 开头的接口重写http://116.66.65.193:8081 ,调用时直接以 /opAdmin开头即表示调用http://116.66.65.193:8081</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;/DoorStatus&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://47.99.11.102:8088&quot;</span>, <span class="comment">//对应服务端的接口地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;vue.config.js&lt;/code&gt; 是一个可选的配置文件，如果项目的 (和 &lt;code&gt;package.json&lt;/cod</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vant组件基本使用</title>
    <link href="https://xuesenxu.github.io/posts/6954a9a9.html"/>
    <id>https://xuesenxu.github.io/posts/6954a9a9.html</id>
    <published>2022-06-17T07:25:50.000Z</published>
    <updated>2022-09-19T09:28:14.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和引入"><a href="#安装和引入" class="headerlink" title="安装和引入"></a>安装和引入</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Vue3项目安装Vant<br><code>npm i vant</code><br>Vue 2 项目，安装 Vant 2<br><code>npm i vant@latest-v2</code></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>引入分为局部引入和全局引入</p><h3 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Field</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Form</span>).<span class="title function_">use</span>(<span class="title class_">Field</span>).<span class="title function_">use</span>(<span class="title class_">Button</span>)</span><br></pre></td></tr></table></figure><h3 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">  <span class="title class_">Form</span>,</span><br><span class="line">  <span class="title class_">Field</span>,</span><br><span class="line">    <span class="title class_">Button</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在一般的Vue项目中最好全局引入，全局引入之后整个项目就可以使用了，一般一个项目引入了<code>Vant</code>之后就不会再引入其他的框架了，因为<code>Vant</code>是专门用来做手机端样式的</p><h1 id="Uploader文件上传组件的使用"><a href="#Uploader文件上传组件的使用" class="headerlink" title="Uploader文件上传组件的使用"></a><code>Uploader</code>文件上传组件的使用</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><a href="https://youzan.github.io/vant/#/zh-CN/uploader">官方文档</a>中介绍的使用方式如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-uploader</span> <span class="attr">:after-read</span>=<span class="string">&quot;afterRead&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">afterRead</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 此时可以自行将文件上传至服务器</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      afterRead,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>从上面的代码中可以看出<code>:after-read</code>后面绑定的是一个方法，所以在<code>Vue</code>中的使用方式应如下所示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-uploader</span> <span class="attr">:after-read</span>=<span class="string">&quot;afterRead&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">afterRead (file) &#123;</span><br><span class="line"><span class="title function_">console</span>(file)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面的代码打印结果如下：<br><img src="https://img-blog.csdnimg.cn/0077098c854543068b8ace6feee3510d.png" alt="在这里插入图片描述"></p><h2 id="向后端传输数据"><a href="#向后端传输数据" class="headerlink" title="向后端传输数据"></a>向后端传输数据</h2><p><code>afterRead</code>函数所传的参数就是上传的文件，但是在往后端传输该文件的时候我们不能直接将<code>file</code>文件直接传到后端，我们需要对文件的格式进行一定处理。需要将其处理成<code>FormData</code>格式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>,file.<span class="property">file</span>)</span><br></pre></td></tr></table></figure></p><h1 id="Toast轻提示组件的使用"><a href="#Toast轻提示组件的使用" class="headerlink" title="Toast轻提示组件的使用"></a><code>Toast</code>轻提示组件的使用</h1><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><p><a href="https://youzan.github.io/vant/#/zh-CN/toast">官方文档</a>中介绍的使用方式如下：</p><p>已加载提示为例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&#x27;加载中...&#x27;</span>,</span><br><span class="line">  <span class="attr">forbidClick</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是在真实的开发过程中的使用方式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">toast</span> = <span class="variable language_">this</span>.<span class="property">$toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line"><span class="attr">message</span>:<span class="string">&#x27;加载中...&#x27;</span>,<span class="comment">//加载时显示的文字</span></span><br><span class="line"><span class="attr">duration</span>:<span class="number">0</span>,<span class="comment">//加载时长</span></span><br><span class="line"><span class="attr">overlay</span>:<span class="literal">false</span>,<span class="comment">//加载时是否有遮罩，个人感觉太丑所以去了</span></span><br><span class="line"><span class="attr">forbidClick</span>:<span class="literal">true</span><span class="comment">//加载时禁止点击页面内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>如果刚进入页面需要显示加载提示的话建议将上述方法写在<code>mounted</code>钩子函数里面</p><h2 id="控制什么时候停止显示加载效果"><a href="#控制什么时候停止显示加载效果" class="headerlink" title="控制什么时候停止显示加载效果"></a>控制什么时候停止显示加载效果</h2><p>在需要停止的地方加入如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">toast</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><br>不如在请求接口的<code>then</code>方法中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装和引入&quot;&gt;&lt;a href=&quot;#安装和引入&quot; class=&quot;headerlink&quot; title=&quot;安装和引入&quot;&gt;&lt;/a&gt;安装和引入&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    <category term="Vant" scheme="https://xuesenxu.github.io/categories/Vue/Vant/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
    <category term="Vant" scheme="https://xuesenxu.github.io/tags/Vant/"/>
    
  </entry>
  
  <entry>
    <title>qrcodejs2实现前端生成二维码且实时刷新</title>
    <link href="https://xuesenxu.github.io/posts/a972e9b9.html"/>
    <id>https://xuesenxu.github.io/posts/a972e9b9.html</id>
    <published>2022-06-16T07:56:04.000Z</published>
    <updated>2022-09-19T09:28:14.763Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章基于前端<code>Vue</code>框架</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>安装：<br><code>npm install qrcodejs2 --save</code><br>引入：<br><code>import QRCode from &#39;qrcodejs2&#39;</code><br>然后在<code>Vue</code>的<code>HTML</code>代码中定义一个真实<code>div</code>并且用<code>ref</code>属性进行标识<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;qrcode&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;qrCodeUrl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>下面是<code>JavaScript</code>中的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createQrcode</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> qrcode = <span class="keyword">new</span> <span class="title class_">QRCode</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">qrCodeUrl</span>,&#123;</span><br><span class="line"><span class="attr">text</span>:<span class="string">&#x27;张三李四王二麻子&#x27;</span>,<span class="comment">//可以是链接，也可以是文本</span></span><br><span class="line"><span class="attr">width</span>:<span class="number">260</span>,<span class="comment">//二维码的宽度</span></span><br><span class="line"><span class="attr">height</span>:<span class="number">260</span>,<span class="comment">//二维码的高度</span></span><br><span class="line"><span class="attr">colorLight</span>:<span class="string">&#x27;#ffffff&#x27;</span>,<span class="comment">//二维码背景色</span></span><br><span class="line"><span class="attr">colorDark</span>:<span class="string">&#x27;#F7382B&#x27;</span>,<span class="comment">//二维码前景色，以实现红码为例</span></span><br><span class="line"><span class="attr">correctLevel</span>: <span class="title class_">QRCode</span>.<span class="property">CorrectLevel</span>.<span class="property">H</span><span class="comment">//纠错等级</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>效果图如下：<br><img src="https://img-blog.csdnimg.cn/188694a64e2c4e459c989215bb9f0fdb.png" alt="在这里插入图片描述"><br>以上步骤可以产生一个基本的二维码，如何做到实时刷新呢？</p><h1 id="二维码实时刷新"><a href="#二维码实时刷新" class="headerlink" title="二维码实时刷新"></a>二维码实时刷新</h1><p>我们在开发过程中肯定会遇到这个需求就是生成的二维码要实时刷新，比如3秒刷新一次。那么如何做到3秒刷新一次呢？</p><p>首先二维码在后端存储的时候回存储为一个字符串，不会将图片存入数据库，也不会将图片存储在服务器然后在数据库中存储一个图片地址，因为这样的话成本太高了，当数据存储到一定的量时就会造成事故。一般而言，会在数据库中存储一个经过加密后的字符串，将这个字符串发送给前端后，前端只需要将这个字符串解析为二维码即可，这样可以节省很多的空间。</p><p>我们如何做到实时刷新呢？</p><p>我们可以设定一个计时器，3秒请求一次后端的数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start () &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">showUserMessage</span>();</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">showUserMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getUserMessage</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userMessage</span> = res.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userMessage</span>.<span class="property">nucleicStatus</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">colorDark</span> = <span class="string">&#x27;#F7382B&#x27;</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">createQrcode</span>()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>但此时会有一个新的问题就是你会发现页面中会不断声生成二维码，而且新生成的二维码会排在以前二维码的下面。也就是说新生成的二维码并没有替换掉之前的二维码，那么该如何去做呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createQrcode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">qrCodeUrl</span>.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span><span class="comment">//词句代码将之前的二维码清空了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;code&#x27;</span>,<span class="variable language_">this</span>.<span class="property">userMessage</span>.<span class="property">subscrideCode</span>);</span><br><span class="line">  <span class="keyword">var</span> qrcode = <span class="keyword">new</span> <span class="title class_">QRCode</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">qrCodeUrl</span>,&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&#x27;this.userMessage.subscrideCode&#x27;</span>,</span><br><span class="line">    <span class="attr">width</span>:<span class="number">260</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">260</span>,</span><br><span class="line">    <span class="attr">colorLight</span>:<span class="variable language_">this</span>.<span class="property">colorDark</span>,</span><br><span class="line">    <span class="attr">colorDark</span>:<span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    <span class="attr">correctLevel</span>: <span class="title class_">QRCode</span>.<span class="property">CorrectLevel</span>.<span class="property">H</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章基于前端&lt;code&gt;Vue&lt;/code&gt;框架&lt;/p&gt;
&lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;p&gt;安装：&lt;br&gt;&lt;code&gt;npm install qrc</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    <category term="Vant" scheme="https://xuesenxu.github.io/categories/Vue/Vant/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
    <category term="Vant" scheme="https://xuesenxu.github.io/tags/Vant/"/>
    
  </entry>
  
  <entry>
    <title>$route.matched的作用以及面包屑导航的制作</title>
    <link href="https://xuesenxu.github.io/posts/2448e183.html"/>
    <id>https://xuesenxu.github.io/posts/2448e183.html</id>
    <published>2022-06-06T01:39:24.000Z</published>
    <updated>2022-09-19T09:28:14.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="route-matched的作用"><a href="#route-matched的作用" class="headerlink" title="$route.matched的作用"></a><code>$route.matched</code>的作用</h2><p><strong>官方解释：</strong> 与给定路由地址匹配的标准化的路由记录数组。</p><p>个人觉得就是当有多级路由的时候，记录每一级路由，并生成数组。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 下面的对象就是路由记录</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>, </span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        <span class="comment">// 这也是个路由记录</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Bar</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>此时<code>$route.matched</code>对应的数组中有两项数据分别是<code>/foo</code>路径下的路由和<code>/foo/bar</code>路径下所对应的路由。有多少级路由就会对应生成多少级路由下的路由。</p><h2 id="面包屑导航制作"><a href="#面包屑导航制作" class="headerlink" title="面包屑导航制作"></a>面包屑导航制作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-breadcrumb class=&quot;app-breadcrumb&quot; separator=&quot;/&quot;&gt;</span><br><span class="line">  &lt;transition-group name=&quot;breadcrumb&quot;&gt;</span><br><span class="line">    &lt;el-breadcrumb-item v-for=&quot;(item,index) in levelList&quot; :key=&quot;item.path&quot;&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;a v-else @click.prevent=&quot;handleLink(item)&quot;&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;/el-breadcrumb-item&gt;</span><br><span class="line">  &lt;/transition-group&gt;</span><br><span class="line">&lt;/el-breadcrumb&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        levelList: null,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created () &#123;</span><br><span class="line">      this.getBreadcrumb()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getBreadcrumb() &#123;</span><br><span class="line">        // only show routes with meta.title</span><br><span class="line">        let matched = this.$route.matched.filter(item =&gt; item.meta &amp;&amp; item.meta.title)</span><br><span class="line"></span><br><span class="line">        this.levelList = matched.filter(item =&gt; item.meta &amp;&amp; item.meta.title &amp;&amp; item.meta.breadcrumb !== false)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>实现效果：</strong><br><img src="https://img-blog.csdnimg.cn/40f7baeb66e24cfe9a42cc85a1110d96.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;route-matched的作用&quot;&gt;&lt;a href=&quot;#route-matched的作用&quot; class=&quot;headerlink&quot; title=&quot;$route.matched的作用&quot;&gt;&lt;/a&gt;&lt;code&gt;$route.matched&lt;/code&gt;的作用&lt;/h2&gt;&lt;p</summary>
      
    
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/Vue/"/>
    
    <category term="ElementUI" scheme="https://xuesenxu.github.io/categories/Vue/ElementUI/"/>
    
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
    <category term="ElementUI" scheme="https://xuesenxu.github.io/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>Next.js（二）Next.js基本使用</title>
    <link href="https://xuesenxu.github.io/posts/568c323.html"/>
    <id>https://xuesenxu.github.io/posts/568c323.html</id>
    <published>2022-05-26T07:30:30.000Z</published>
    <updated>2022-09-19T09:28:14.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建Next-js应用程序"><a href="#创建Next-js应用程序" class="headerlink" title="创建Next.js应用程序"></a>创建Next.js应用程序</h1><p>要从头开始使用 React 构建完整的 Web 应用程序，您需要考虑许多重要的细节：</p><ul><li>代码必须使用 webpack 之类的打包器打包，并使用 Babel 之类的编译器进行转换。</li><li>您需要进行生产优化，例如代码拆分。</li><li>您可能希望静态预渲染某些页面以提高性能和 SEO。您可能还想使用服务器端渲染或客户端渲染。</li><li>您可能需要编写一些服务器端代码来将您的 React 应用程序连接到您的数据存储。</li></ul><p>一个框架可以解决这些问题。但是这样的框架必须具有正确的抽象级别——否则它不会很有用。它还需要具有出色的“开发人员体验”，确保您和您的团队在编写代码时拥有令人惊叹的体验。</p><h2 id="Next-js：反应框架"><a href="#Next-js：反应框架" class="headerlink" title="Next.js：反应框架"></a>Next.js：反应框架</h2><p>输入Next.js，即 React 框架。Next.js 为上述所有问题提供了解决方案。但更重要的是，它会让你和你的团队在构建 React 应用程序时进入成功的陷阱。</p><p>Next.js 旨在拥有一流的开发人员体验和许多内置功能，例如：</p><ul><li>直观的基于页面的路由系统（支持动态路由）</li><li>预渲染，静态生成(SSG) 和服务器端渲染(SSR) 均支持每页</li><li>自动代码拆分以加快页面加载速度</li><li>具有优化预取的客户端路由</li><li>内置 CSS和Sass 支持，支持任何CSS-in-JS库</li><li>支持快速刷新的开发环境</li><li>使用无服务器函数构建 API 端点的API 路由</li><li>完全可扩展</li></ul><p>Next.js 用于数以万计的面向生产的网站和 Web 应用程序，其中包括许多世界上最大的品牌。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>首先，让我们确保您的开发环境已准备就绪。</p><ul><li>如果您没有安装Node.js，请从此处安装。您需要 Node.js 版本10.13或更高版本。</li><li>您将在本教程中使用自己的文本编辑器和终端应用程序。</li></ul><blockquote><p>如果您使用的是 Windows，我们建议您下载 Git for Windows并使用它附带的 Git Bash，它支持本教程中特定于 UNIX 的命令。适用于 Linux 的 Windows 子系统 (WSL)是另一种选择。</p></blockquote><h2 id="创建-Next-js-应用"><a href="#创建-Next-js-应用" class="headerlink" title="创建 Next.js 应用"></a>创建 Next.js 应用</h2><p>要创建 Next.js 应用程序，请打开终端，<code>cd</code>进入要在其中创建应用程序的目录，然后运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create<span class="literal">-next-app</span> nextjs<span class="literal">-blog</span> <span class="literal">--use-npm</span> <span class="literal">--example</span> <span class="string">&quot;https://github.com/vercel/next-learn/tree/master/basics/learn-starter&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>在后台，它使用名为 的工具<code>create-next-app</code>，它为您引导 Next.js 应用程序。它通过标志使用<a href="https://github.com/vercel/next-learn/tree/master/basics/learn-starter">这个模板</a>。<code>--example</code></p></blockquote><p>如果它不起作用，请查看<a href="https://github.com/vercel/next-learn/blob/master/basics/errors/install.md">此页面</a>。</p><h3 id="运行开发服务器"><a href="#运行开发服务器" class="headerlink" title="运行开发服务器"></a>运行开发服务器</h3><p>您现在有一个名为<code>nextjs-blog</code>. 让我们<code>cd</code>进入它：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nextjs<span class="literal">-blog</span></span><br></pre></td></tr></table></figure><br>然后，运行以下命令：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><br>这会在端口3000上启动 Next.js 应用程序的“开发服务器”。</p><h3 id="来到Next-js页面"><a href="#来到Next-js页面" class="headerlink" title="来到Next.js页面"></a>来到Next.js页面</h3><p>当我们访问<code>http://localhost:3000</code>时，会出现下面页面。</p><p><img src="https://img-blog.csdnimg.cn/9073cd41310845a5b89084aea48daddd.png" alt="在这里插入图片描述"></p><h3 id="编辑页面"><a href="#编辑页面" class="headerlink" title="编辑页面"></a>编辑页面</h3><p>让我们尝试编辑起始页。</p><ul><li>确保 Next.js 开发服务器仍在运行。</li><li><code>pages/index.js</code>使用您的文本编辑器打开。</li><li>在标签下找到写着“Welcome to”<code>&lt;h1&gt;</code>的文字并将其更改为“Learn”。</li><li>保存文件。</li></ul><p>保存文件后，浏览器会自动使用新文本更新页面：<br><img src="https://img-blog.csdnimg.cn/afb2ce9db913485fa12e033ab3822542.png" alt="在这里插入图片描述"><br>Next.js 开发服务器启用了快速刷新。当您对文件进行更改时，Next.js 几乎会立即自动在浏览器中应用更改。无需刷新！这将帮助您快速迭代您的应用程序。</p><h1 id="在页面之间导航"><a href="#在页面之间导航" class="headerlink" title="在页面之间导航"></a>在页面之间导航</h1><h3 id="Next-js中的页面"><a href="#Next-js中的页面" class="headerlink" title="Next.js中的页面"></a>Next.js中的页面</h3><p><code>pages</code>在 Next.js 中，页面是从目录中的文件导出的 React 组件。</p><p>页面根据其文件名与路由相关联。例如，在开发中：</p><ul><li><code>pages/index.js</code>与<code>/</code>路线相关联。</li><li><code>pages/posts/first-post.js</code>与<code>/posts/first-post</code>路线相关联。</li></ul><p>我们已经有了这个<code>pages/index.js</code>文件，所以让我们创建<code>pages/posts/first-post.js</code>来看看它是如何工作的。</p><h3 id="创建一个新页面"><a href="#创建一个新页面" class="headerlink" title="创建一个新页面"></a>创建一个新页面</h3><p>在.<code>posts_pages</code></p><p><code>first-post.js</code>在目录中创建一个名为的文件<code>posts</code>，其内容如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">FirstPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>First Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>组件可以有任何名称，但您必须将其导出为<code>default</code>导出。</p><p>现在，确保开发服务器正在运行并访问<code>http://localhost:3000/posts/first-post</code>。您应该看到以下页面：<br><img src="https://img-blog.csdnimg.cn/6f616b255bcc4c9680cdc9f271f5e144.png" alt="在这里插入图片描述"><br>这就是在 Next.js 中创建不同页面的方法。</p><p><code>pages</code>只需在目录下创建一个JS文件，文件的路径就变成了URL路径。</p><p>在某种程度上，这类似于使用 HTML 或 PHP 文件构建网站。您无需编写 HTML，而是编写 JSX 并使用 React 组件。</p><p>让我们添加一个指向新添加页面的链接，以便我们可以从主页导航到它。</p><h3 id="链接组件"><a href="#链接组件" class="headerlink" title="链接组件"></a>链接组件</h3><p>在网站上的页面之间链接时，您使用<code>&lt;a&gt;</code>HTML 标记。</p><p>在 Next.js 中，您使用<code>Link</code>Component from<code>next/link</code>来包装<code>&lt;a&gt;</code>标签。<code>&lt;Link&gt;</code>允许您进行客户端导航到应用程序中的不同页面。</p><h3 id="使用-lt-Link-gt"><a href="#使用-lt-Link-gt" class="headerlink" title="使用&lt;Link&gt;"></a>使用<code>&lt;Link&gt;</code></h3><p>首先，打开，并通过在顶部添加以下行来<code>pages/index.js</code>导入<code>Link</code>组件：<code>next/link</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br></pre></td></tr></table></figure><br>然后找到h1看起来像这样的标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">  Learn <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://nextjs.org&quot;</span>&gt;</span>Next.js!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并将其更改为：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">  Read&#123;&#x27; &#x27;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/posts/first-post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>this page!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>&#123;&#39; &#39;&#125;</code>添加一个空格，用于将文本分成多行。</p></blockquote><p>接下来，打开<code>pages/posts/first-post.js</code>并将其内容替换为以下内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">FirstPost</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>First Post<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span>&gt;</span>Back to home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如您所见，该Link组件类似于使用<a>标签，但<a href="…">您使用<Link href="…">并在其中放置<a>标签而不是 。</p><p>让我们看看它是否有效。您现在应该在每个页面上都有一个链接，允许您来回切换：<br><img src="https://img-blog.csdnimg.cn/img_convert/a390dda8286610feb10535f42a1f8352.gif" alt=""></p><h3 id="客户端导航"><a href="#客户端导航" class="headerlink" title="客户端导航"></a>客户端导航</h3><p>该<code>Link</code>组件支持在同一个 Next.js 应用程序中的两个页面之间进行客户端导航。</p><p>客户端导航意味着使用 JavaScript进行页面转换，这比浏览器完成的默认导航要快。</p><p>这里有一个简单的方法可以验证它：</p><ul><li>使用浏览器的开发者工具将<code>backgroundCSS</code> 属性更改<code>&lt;html&gt;</code>为<code>yellow</code>。</li><li>单击链接可在两个页面之间来回切换。</li><li>您会看到黄色背景在页面转换之间持续存在。</li></ul><p>这表明浏览器没有加载整个页面并且客户端导航正在工作。<br><img src="https://img-blog.csdnimg.cn/img_convert/5644798f1810496dda7a27d14627f16e.gif" alt=""><br>如果您使用<code>&lt;a href=&quot;…&quot;&gt;</code>而不是<code>&lt;Link href=&quot;…&quot;&gt;</code>这样做，则背景颜色将在链接点击时被清除，因为浏览器会进行完全刷新。</p><h3 id="代码拆分和预取"><a href="#代码拆分和预取" class="headerlink" title="代码拆分和预取"></a>代码拆分和预取</h3><p>Next.js 会自动进行代码拆分，因此每个页面只加载该页面所需的内容。这意味着在呈现主页时，最初不会提供其他页面的代码。</p><p>即使您有数百个页面，这也可以确保主页快速加载。</p><p>仅加载您请求的页面的代码也意味着页面变得孤立。如果某个页面抛出错误，应用程序的其余部分仍然可以工作。</p><p>此外，在 Next.js 的生产版本中，每当<code>Link</code>组件出现在浏览器的视口中时，Next.js 都会自动在后台预取链接页面的代码。当您单击链接时，目标页面的代码已经在后台加载，页面转换几乎是即时的！</p><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>Next.js 通过代码拆分、客户端导航和预取（在生产中）自动优化您的应用程序以获得最佳性能。</p><p>您将路由创建为文件<code>pages</code>并使用内置<code>Link</code>组件。不需要路由库。</p><p><a href="https://nextjs.org/docs/routing/introduction">您可以在路由文档中的 API 参考</a>和路由中了解有关<code>Link</code>组件的更多信息。<code>next/link</code></p><blockquote><p>如果您需要链接到Next.js 应用程序之外的外部页面，只需使用<code>&lt;a&gt;</code>不带<code>Link</code>.如果您需要添加属性，例如，<code>className</code>将其添加到<code>a</code>标签，而不是<code>Link</code>标签。这是一个例子。</p></blockquote><h1 id="资产、元数据和-CSS"><a href="#资产、元数据和-CSS" class="headerlink" title="资产、元数据和 CSS"></a>资产、元数据和 CSS</h1><h2 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h2><p>Next.js 可以<strong>在顶级目录下提供静态资产</strong>，例如图片。可以从应用程序的根目录引用其中的文件，类似于.<code>public</code> <code>public</code> <code>pages</code></p><p>该<code>public</code>目录对于<code>robots.txt</code>、Google Site Verification 和任何其他静态资产也很有用。查看<a href="https://nextjs.org/docs/basic-features/static-file-serving">静态文件服务</a>的文档以了解更多信息。</p><h3 id="下载您的个人资料图片"><a href="#下载您的个人资料图片" class="headerlink" title="下载您的个人资料图片"></a>下载您的个人资料图片</h3><p>首先，让我们检索您的个人资料图片。</p><p>*<code>.jpg</code>以格式下载您的个人资料图片（或使用此文件）。</p><ul><li><code>images</code>在目录中创建一个<code>public</code>目录。</li><li>将图片另存为<code>profile.jpg</code>目录<code>public/images</code>。</li><li>图像大小可以在 400 像素 x 400 像素左右。</li><li>您可以直接删除该<code>public</code>目录下未使用的 SVG 徽标文件。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建Next-js应用程序&quot;&gt;&lt;a href=&quot;#创建Next-js应用程序&quot; class=&quot;headerlink&quot; title=&quot;创建Next.js应用程序&quot;&gt;&lt;/a&gt;创建Next.js应用程序&lt;/h1&gt;&lt;p&gt;要从头开始使用 React 构建完整的 Web 应用</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    <category term="Next" scheme="https://xuesenxu.github.io/categories/React/Next/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
    <category term="Next" scheme="https://xuesenxu.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Next.js（一）基础</title>
    <link href="https://xuesenxu.github.io/posts/77fb6f34.html"/>
    <id>https://xuesenxu.github.io/posts/77fb6f34.html</id>
    <published>2022-05-19T07:24:41.000Z</published>
    <updated>2022-09-19T09:28:14.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Next-js-是什么？"><a href="#Next-js-是什么？" class="headerlink" title="Next.js 是什么？"></a>Next.js 是什么？</h2><p>Next.js 是一个灵活的React 框架，它提供了构建块来创建快速的 Web 应用程序。</p><h3 id="Web-应用程序的构建块"><a href="#Web-应用程序的构建块" class="headerlink" title="Web 应用程序的构建块"></a>Web 应用程序的构建块</h3><p>在构建现代应用程序时，您需要考虑一些事项。如：</p><ul><li>用户界面- 用户将如何使用您的应用程序并与之交互。</li><li>路由- 用户如何在应用程序的不同部分之间导航。</li><li>数据获取- 您的数据所在的位置以及如何获取数据。</li><li>渲染- 何时何地渲染静态或动态内容。</li><li>集成- 您使用哪些第三方服务（CMS、身份验证、支付等）以及您如何连接到它们。</li><li>基础设施- 部署、存储和运行应用程序代码的位置（无服务器、CDN、* Edge 等）。</li><li>性能- 如何为最终用户优化您的应用程序。</li><li>可扩展性——您的应用程序如何随着您的团队、数据和流量的增长而适应。</li><li>开发人员体验- 您的团队构建和维护您的应用程序的经验。</li></ul><p>对于应用程序的每个部分，您需要决定是自己构建解决方案还是使用其他工具，例如库和框架。</p><h3 id="什么是反应？"><a href="#什么是反应？" class="headerlink" title="什么是反应？"></a>什么是反应？</h3><p>React是一个用于构建交互式用户界面的 JavaScript库。</p><p>用户界面是指用户在屏幕上看到并与之交互的元素。</p><p><img src="https://img-blog.csdnimg.cn/46943c0f409f4b25ad50270da99e9903.png" alt="在这里插入图片描述"><br>通过库，我们的意思是 React 提供了有用的函数来构建 UI，但留给开发人员在他们的应用程序中使用这些函数的位置。</p><p>React 成功的部分原因在于它对构建应用程序的其他方面相对不置可否。这导致了第三方工具和解决方案的蓬勃发展的生态系统。</p><p>然而，这也意味着从头开始构建一个完整的 React 应用程序需要一些努力。开发人员需要花时间配置工具并针对常见的应用程序需求重新设计解决方案。</p><h3 id="Next-js-是什么？-1"><a href="#Next-js-是什么？-1" class="headerlink" title="Next.js 是什么？"></a>Next.js 是什么？</h3><p>Next.js 是一个 React框架，它为您提供构建块来创建 Web 应用程序。</p><p>我们所说的框架是指 Next.js 处理 React 所需的工具和配置，并为您的应用程序提供额外的结构、特性和优化。</p><p><img src="https://img-blog.csdnimg.cn/a198d002e9c9489d9ffe7ef931551f0e.png" alt="在这里插入图片描述"><br>您可以使用 React 构建您的 UI，然后逐步采用 Next.js 功能来解决常见的应用程序需求，例如路由、数据获取、集成 - 同时改善开发人员和最终用户的体验。</p><p>无论您是个人开发人员还是大型团队的一员，您都可以利用 React 和 Next.js 构建完全交互式、高度动态和高性能的 Web 应用程序。</p><p>在接下来的课程中，我们将讨论如何开始使用 React 和 Next.js。</p><h2 id="Next-js-是如何工作的"><a href="#Next-js-是如何工作的" class="headerlink" title="Next.js 是如何工作的"></a>Next.js 是如何工作的</h2><h3 id="开发和生产环境"><a href="#开发和生产环境" class="headerlink" title="开发和生产环境"></a>开发和生产环境</h3><p>您可以将环境视为代码运行的上下文。</p><p>在开发过程中，您正在本地计算机上构建和运行应用程序。投入生产是使您的应用程序准备好被用户部署和使用的过程。</p><h3 id="这如何适用于-Next-js"><a href="#这如何适用于-Next-js" class="headerlink" title="这如何适用于 Next.js"></a>这如何适用于 Next.js</h3><p>Next.js 为应用程序的开发和生产阶段提供了功能。例如：</p><ul><li>在开发阶段，Next.js 针对开发人员及其构建应用程序的经验进行了优化。它具有旨在改善开发人员体验的功能，例如TypeScript 和 ESLint 集成、 快速刷新等。</li><li>在生产阶段，Next.js 针对最终用户及其使用应用程序的体验进行了优化。它旨在转换代码以使其具有高性能和可访问性。</li></ul><p>由于每个环境都有不同的考虑和目标，因此需要做很多工作才能将应用程序从开发转移到生产。例如，需要对应用程序代码进行编译、捆绑、缩小和代码拆分。</p><h3 id="Next-js-编译器"><a href="#Next-js-编译器" class="headerlink" title="Next.js 编译器"></a>Next.js 编译器</h3><p>Next.js 处理大部分代码转换和底层基础设施，使您的应用程序更容易投入生产。<br>这之所以成为可能，是因为 Next.js 有一个用Rust（一种低级编程语言）和 SWC（一个可用于编译、缩小、捆绑等的平台）编写的编译器。</p><h3 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a>什么是编译</h3><p>开发人员使用对开发人员更友好的语言编写代码，例如 JSX、TypeScript 和现代版本的 JavaScript。虽然这些语言提高了开发人员的效率和信心，但它们需要先编译成 JavaScript，然后浏览器才能理解它们。</p><p>编译是指以一种语言获取代码并以另一种语言或该语言的另一种版本输出的过程。</p><p><img src="https://img-blog.csdnimg.cn/7ab12fcd834949588a537956379fe01a.png" alt="在这里插入图片描述"><br>在 Next.js 中，编译发生在开发阶段，当您编辑代码时，以及作为构建步骤的一部分，以准备应用程序以进行生产。</p><h3 id="什么是缩小？"><a href="#什么是缩小？" class="headerlink" title="什么是缩小？"></a>什么是缩小？</h3><p>开发人员编写的代码针对人类可读性进行了优化。此代码可能包含代码运行所不需要的额外信息，例如注释、空格、缩进和多行。</p><p><img src="https://img-blog.csdnimg.cn/0c18fdd3a25f4abea4705bb4b3142742.png" alt="在这里插入图片描述"><br>缩小是在不更改代码功能的情况下删除不必要的代码格式和注释的过程。目标是通过减小文件大小来提高应用程序的性能。</p><h3 id="什么是捆绑？"><a href="#什么是捆绑？" class="headerlink" title="什么是捆绑？"></a>什么是捆绑？</h3><p>开发人员将他们的应用程序分解为模块、组件和功能，这些模块、组件和功能可用于构建更大的应用程序。导出和导入这些内部模块以及外部第三方包会创建一个复杂的文件依赖网络。<br><img src="https://img-blog.csdnimg.cn/69f4114999cc4c83b4903ce1e1dacb06.png" alt="在这里插入图片描述"><br>捆绑是解决依赖关系网络并将文件（或模块）合并（或“打包”）为浏览器优化捆绑包的过程，目的是减少用户访问网页时对文件的请求数量。</p><h3 id="什么是代码拆分？"><a href="#什么是代码拆分？" class="headerlink" title="什么是代码拆分？"></a>什么是代码拆分？</h3><p>开发人员通常将他们的应用程序拆分为多个页面，这些页面可以从不同的 URL 访问。这些页面中的每一个都成为应用程序的唯一入口点。</p><p>代码拆分是将应用程序的包拆分为每个入口点所需的较小块的过程。目标是通过仅加载运行该页面所需的代码来改进应用程序的初始加载时间。</p><p><img src="https://img-blog.csdnimg.cn/9f05c6dca363460c87faaf51b1b15928.png" alt="在这里插入图片描述"><br>Next.js 内置了对代码拆分的支持。在构建步骤中，目录中的每个文件 pages/都会自动将代码拆分为自己的 JavaScript 包。</p><p>更远：</p><ul><li>页面之间共享的任何代码也会被拆分到另一个包中，以避免在进一步导航时重新下载相同的代码。</li><li>在初始页面加载后，Next.js 可以开始预加载用户可能导航到的其他页面的代码。</li><li>动态导入是另一种手动拆分最初加载的代码的方法。</li></ul><h3 id="构建时间和运行时间"><a href="#构建时间和运行时间" class="headerlink" title="构建时间和运行时间"></a>构建时间和运行时间</h3><p>构建时间（或构建步骤）是为生产准备应用程序代码的一系列步骤的名称。</p><p>当您构建应用程序时，Next.js 会将您的代码转换为生产优化文件，准备好部署到服务器并供用户使用。这些文件包括：</p><ul><li>静态生成页面的 HTML 文件</li><li>用于在服务器上呈现页面的JavaScript 代码</li><li>用于使页面在客户端上交互的 JavaScript 代码</li><li>CSS 文件</li></ul><p>运行时间（或请求时间）是指在构建和部署应用程序之后，应用程序响应用户请求而运行的时间段。</p><h3 id="客户端和服务器"><a href="#客户端和服务器" class="headerlink" title="客户端和服务器"></a>客户端和服务器</h3><p>在 Web 应用程序的上下文中，客户端是指用户设备上的浏览器，它向服务器发送请求以获取您的应用程序代码。然后它将从服务器接收到的响应转换为用户可以与之交互的界面。</p><p><img src="https://img-blog.csdnimg.cn/21b72d091bb24adca47f6f8301b2f885.png" alt="在这里插入图片描述"><br>服务器是指数据中心中的计算机，它存储您的应用程序代码、接收来自客户端的请求、进行一些计算并发送回适当的响应。</p><h3 id="什么是渲染？"><a href="#什么是渲染？" class="headerlink" title="什么是渲染？"></a>什么是渲染？</h3><p>将您在 React 中编写的代码转换为 UI 的 HTML 表示形式是不可避免的工作单元。这个过程称为渲染。</p><p>渲染可以在服务器或客户端上进行。它可以在构建时提前发生，也可以在运行时的每个请求上发生。</p><p>Next.js 提供了三种渲染方法：服务器端渲染、静态站点生成和客户端渲染。</p><h3 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h3><p>服务器端渲染和静态站点生成也称为预渲染，因为外部数据的获取和 React 组件到 HTML 的转换发生在结果发送到客户端之前。</p><h3 id="客户端渲染与预渲染"><a href="#客户端渲染与预渲染" class="headerlink" title="客户端渲染与预渲染"></a>客户端渲染与预渲染</h3><p>在标准的 React 应用程序中，浏览器从服务器接收一个空的 HTML shell 以及用于构建 UI 的 JavaScript 指令。这称为客户端渲染，因为初始渲染工作发生在用户设备上。</p><p><img src="https://img-blog.csdnimg.cn/90c943184de846edb39523108647e614.png" alt="在这里插入图片描述"></p><blockquote><p>注意：您可以选择在 Next.js 应用程序中为特定组件使用客户端渲染，方法是选择使用 React<code>useEffect()</code>或数据获取钩子（例如useSWR ）获取数据。</p></blockquote><p>相比之下，Next.js默认预渲染每个页面。预渲染意味着 HTML 是在服务器上预先生成的，而不是全部由用户设备上的 JavaScript 完成。</p><p>实际上，这意味着对于完全客户端渲染的应用程序，用户在渲染工作完成时会看到一个空白页面。与预渲染应用相比，用户将看到构建的 HTML：</p><p><img src="https://img-blog.csdnimg.cn/419d0bc173bd43928075ba1899387295.png" alt="在这里插入图片描述"><br>让我们讨论两种类型的预渲染：</p><h3 id="服务器端渲染"><a href="#服务器端渲染" class="headerlink" title="服务器端渲染"></a>服务器端渲染</h3><p>使用服务器端呈现，页面的 HTML 是在服务器上为每个请求生成的。生成的 HTML、JSON 数据和 JavaScript 指令以使页面具有交互性，然后发送到客户端。</p><p>在客户端，HTML 用于显示快速的非交互式页面，而 React 使用 JSON 数据和 JavaScript 指令使组件具有交互性（例如，将事件处理程序附加到按钮）。这个过程称为水合作用。</p><p>在 Next.js 中，您可以使用<code>getServerSideProps</code>选择服务器端呈现页面。</p><blockquote><p>注意： React 18 和 Next 12 引入了React 服务器组件的 alpha 版本。服务器组件完全在服务器上呈现，不需要客户端 JavaScript 来呈现。此外，服务器组件允许开发人员在服务器上保留一些逻辑，并且只将该逻辑的结果发送给客户端。这减少了发送到客户端的包大小并提高了客户端渲染性能。在此处了解有关 React 服务器组件的更多信息。</p></blockquote><h3 id="静态站点生成"><a href="#静态站点生成" class="headerlink" title="静态站点生成"></a>静态站点生成</h3><p>使用静态站点生成，HTML 是在服务器上生成的，但与服务器端渲染不同的是，运行时没有服务器。取而代之的是，在构建时，部署应用程序时生成一次内容，并将 HTML 存储在CDN中并重新用于每个请求。</p><p>在 Next.js 中，您可以选择使用<code>getStaticProps</code>静态生成页面。</p><blockquote><p>注意：您可以在构建站点后使用增量静态重新生成来创建或更新静态页面 。这意味着如果您的数据发生变化，您不必重建整个站点。</p></blockquote><p>Next.js 的美妙之处在于，您可以逐页选择最适合您的用例的渲染方法，无论是静态站点生成、服务器端渲染还是客户端渲染。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Next-js-是什么？&quot;&gt;&lt;a href=&quot;#Next-js-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Next.js 是什么？&quot;&gt;&lt;/a&gt;Next.js 是什么？&lt;/h2&gt;&lt;p&gt;Next.js 是一个灵活的React 框架，它提供了构建块</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    <category term="Next" scheme="https://xuesenxu.github.io/categories/React/Next/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
    <category term="Next" scheme="https://xuesenxu.github.io/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>EChats图表的使用</title>
    <link href="https://xuesenxu.github.io/posts/f8b66bb9.html"/>
    <id>https://xuesenxu.github.io/posts/f8b66bb9.html</id>
    <published>2022-05-05T12:37:22.000Z</published>
    <updated>2022-09-19T09:28:14.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ECharts基本使用"><a href="#ECharts基本使用" class="headerlink" title="ECharts基本使用"></a>ECharts基本使用</h2><h3 id="获取-Apache-ECharts"><a href="#获取-Apache-ECharts" class="headerlink" title="获取 Apache ECharts"></a>获取 Apache ECharts</h3><p><code>Apache ECharts</code> 支持多种下载方式，可以在下一篇教程<a href="https://echarts.apache.org/handbook/zh/basics/download">安装</a>中查看所有方式。这里，我们以从<code>[jsDelivr]</code>(<a href="https://www.jsdelivr.com/package/npm/echarts">https://www.jsdelivr.com/package/npm/echarts</a>) `CDN 上获取为例，介绍如何快速安装。</p><p>在 <a href="https://www.jsdelivr.com/package/npm/echarts">https://www.jsdelivr.com/package/npm/echarts</a> 选择 <code>dist/echarts.js</code>，点击并保存为 <code>echarts.js</code> 文件。</p><h3 id="引入Apache-ECharts"><a href="#引入Apache-ECharts" class="headerlink" title="引入Apache ECharts"></a>引入Apache ECharts</h3><p>在刚才保存 <code>echarts.js</code> 的目录新建一个 <code>index.html</code> 文件，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>图表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开这个 <code>index.html</code>，你会看到一片空白。但是不要担心，打开控制台确认没有报错信息，就可以进行下一步。</p><h3 id="绘制一个简单的图表"><a href="#绘制一个简单的图表" class="headerlink" title="绘制一个简单的图表"></a>绘制一个简单的图表</h3><p>在绘图前我们需要为 ECharts 准备一个定义了高宽的 DOM 容器。在刚才的例子 <code>&lt;/head&gt;</code> 之后，添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以通过 <a href="https://echarts.apache.org//api.html#echarts.init">echarts.init</a> 方法初始化一个 echarts 实例并通过 <a href="https://echarts.apache.org//api.html#echartsInstance.setOption">setOption</a> 方法生成一个简单的柱状图，下面是完整代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ECharts<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入刚刚下载的 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 ECharts 准备一个定义了宽高的 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：</span></span><br><span class="line"><span class="comment">宽和高必须采用行内式的写法不然不起作用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">text</span>: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tooltip</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: [<span class="string">&#x27;销量&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yAxis</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="language-javascript">      myChart.<span class="title function_">setOption</span>(option,<span class="string">&#x27;dark&#x27;</span>);<span class="comment">//第一个参数是配置项，第二个参数是主题颜色</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://img-blog.csdnimg.cn/039062d359ef47c5a81a13ee9a1f1dc6.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uVc6gwgR-1651753885854)(../images/image-20220504173227018.png)\]"></p><h2 id="在Vue中绘制图表"><a href="#在Vue中绘制图表" class="headerlink" title="在Vue中绘制图表"></a>在Vue中绘制图表</h2><ol><li><p>首先要为图表创建容器，</p><p>在HTML代码中创建元素，这两个元素用来存放图表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;pieRef&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pie&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main-chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;lineRef&quot;</span> <span class="attr">id</span>=<span class="string">&quot;line&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main-chart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>data</code>中创建两个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pieChart</span>: &#123;&#125;,</span><br><span class="line"><span class="attr">lineChart</span>: &#123;&#125;,</span><br></pre></td></tr></table></figure><p>下面来绘制图表</p><pre><code>        option: &#123;            title: &#123;图表标题                text: &#39;Referer of a Website&#39;,//图表主标题                subtext: &#39;Fake Data&#39;,//图表副标题                left: &#39;center&#39;//主副标题的水平位置            &#125;,            tooltip: &#123;//图表提示框                trigger: &#39;item&#39;//触发类型（&#39;item&#39;，数据项图形触发，主要在散点图，                               //饼图等无类目轴的图表中使用；&#39;axis&#39;，坐标轴触发，                               //主要在柱状图，折线图等会使用类目轴的图表中使用；&#39;none&#39;，不触发。）            &#125;,            legend: &#123;//对图例组件的相关配置                orient: &#39;vertical&#39;,//设置图例的朝向方式，vertical垂直显示，horizontal // 水平显示                left: &#39;left&#39;//left属性设置图例在x轴上的位置值有left，center，right；                            //top设置在y轴上的位置，值有top、center、bottom            &#125;,            series: [//一组数值以及他们映射成的图                &#123;                    name: &#39;Access From&#39;,//需要展示，如图1，图2                    type: &#39;pie&#39;,//图表类型：line折线形，bar条状形，pie饼图，scatter散点图，                    radius: &#39;50%&#39;,                    data: [//要展示的数据                        &#123; value: 1048, name: &#39;Search Engine&#39; &#125;,//name某一项，value是某一项的值                        &#123; value: 735, name: &#39;Direct&#39; &#125;,                        &#123; value: 580, name: &#39;Email&#39; &#125;,                        &#123; value: 484, name: &#39;Union Ads&#39; &#125;,                        &#123; value: 300, name: &#39;Video Ads&#39; &#125;                    ],                    emphasis: &#123;//高亮样式，鼠标悬停到某一项时突出显示的样式                        itemStyle: &#123;//样式设置                            shadowBlur: 10,//阴影亮度                            shadowOffsetX: 0,//阴影偏移量                            shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;//阴影颜色                        &#125;                    &#125;                &#125;            ]        &#125;,       // 图表二设置        option2: &#123;            title: &#123;                text: &#39;Stacked Area Chart&#39;            &#125;,            tooltip: &#123;                trigger: &#39;axis&#39;,                axisPointer: &#123;                    type: &#39;cross&#39;,// 指示器类型（&#39;line&#39; 直线指示器；                                  //&#39;shadow&#39; 阴影指示器；&#39;none&#39; 无指示器；                                  //&#39;cross&#39; 十字准星指示器。）                    label: &#123;                        backgroundColor: &#39;#6a7985&#39;//文本标签背景颜色                    &#125;                &#125;            &#125;,            legend: &#123;                data: [&#39;Email&#39;, &#39;Union Ads&#39;, &#39;Video Ads&#39;, &#39;Direct&#39;, &#39;Search Engine&#39;]            &#125;,            toolbox: &#123;                feature: &#123;                saveAsImage: &#123;&#125;                &#125;            &#125;,            grid: &#123;//图标离容器的距离                left: &#39;3%&#39;,//图表离容器左侧的距离                right: &#39;4%&#39;,//图表离容器右侧的距离                bottom: &#39;3%&#39;,//图表离容器底部的距离                containLabel: true//防止标签溢出，计算距离时候会计算容器边到标签的距离，                                  //否则计算容器边缘到刻度线的距离。            &#125;,            xAxis: [//对x轴进行设置                &#123;                    type: &#39;category&#39;,//坐标轴类型                    boundaryGap: false,//坐标轴两边留白策略                    data: [&#39;Mon&#39;, &#39;Tue&#39;, &#39;Wed&#39;, &#39;Thu&#39;, &#39;Fri&#39;, &#39;Sat&#39;, &#39;Sun&#39;]//x轴的标度                &#125;            ],            yAxis: [//对y轴进行设置                &#123;                type: &#39;value&#39;                &#125;            ],            series: [                &#123;                    name: &#39;Email&#39;,                    type: &#39;line&#39;,                    stack: &#39;Total&#39;,                    areaStyle: &#123;&#125;,                    emphasis: &#123;                        focus: &#39;series&#39;                    &#125;,                    data: [120, 132, 101, 134, 90, 230, 210]                &#125;,                &#123;                    name: &#39;Union Ads&#39;,                    type: &#39;line&#39;,                    stack: &#39;Total&#39;,                    areaStyle: &#123;&#125;,                    emphasis: &#123;                        focus: &#39;series&#39;                    &#125;,                    data: [220, 182, 191, 234, 290, 330, 310]                &#125;,                &#123;                    name: &#39;Video Ads&#39;,                    type: &#39;line&#39;,                    stack: &#39;Total&#39;,                    areaStyle: &#123;&#125;,                    emphasis: &#123;                        focus: &#39;series&#39;                    &#125;,                    data: [150, 232, 201, 154, 190, 330, 410]                    &#125;,                &#123;                    name: &#39;Direct&#39;,                    type: &#39;line&#39;,                    stack: &#39;Total&#39;,                    areaStyle: &#123;&#125;,                    emphasis: &#123;                        focus: &#39;series&#39;                    &#125;,                    data: [320, 332, 301, 334, 390, 330, 320]                    &#125;,                &#123;                    name: &#39;Search Engine&#39;,                    type: &#39;line&#39;,                    stack: &#39;Total&#39;,                    label: &#123;                        show: true,                        position: &#39;top&#39;                    &#125;,                    areaStyle: &#123;&#125;,                    emphasis: &#123;                        focus: &#39;series&#39;                    &#125;,                    data: [820, 932, 901, 934, 1290, 1330, 1320]                &#125;            ]        &#125;</code></pre></li><li><p>注册容器通过<code>init</code>方法初始化一个 <code>echarts</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;<span class="comment">//该方法需要在组件渲染时就进行调用</span></span><br><span class="line">    ...</span><br><span class="line">    renderChat () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pieChart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pie&quot;</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lineChart</span> = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;line&quot;</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pieChart</span>.<span class="title function_">setOption</span>(<span class="variable language_">this</span>.<span class="property">option</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lineChart</span>.<span class="title function_">setOption</span>(<span class="variable language_">this</span>.<span class="property">option2</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>当浏览器的窗口大小发生变化的时候需要对图表重新进行渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resizeHandle () &#123;</span><br><span class="line">  <span class="comment">//实时刷新退表的大小</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pieChart</span>.<span class="title function_">resize</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lineChart</span>.<span class="title function_">resize</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://img-blog.csdnimg.cn/32fbec4717884aaa88a5907b60990beb.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-T62XbPye-1651753885855)(../images/image-20220505111535147.png)\]"></p><p>图一</p><p><img src="https://img-blog.csdnimg.cn/9870c9d724be4a239e535b2b414cbf08.png" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h2pv5iny-1651753885856)(../images/image-20220505112323415.png)\]"></p><p>图二</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ECharts基本使用&quot;&gt;&lt;a href=&quot;#ECharts基本使用&quot; class=&quot;headerlink&quot; title=&quot;ECharts基本使用&quot;&gt;&lt;/a&gt;ECharts基本使用&lt;/h2&gt;&lt;h3 id=&quot;获取-Apache-ECharts&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="EChats" scheme="https://xuesenxu.github.io/categories/EChats/"/>
    
    <category term="Vue" scheme="https://xuesenxu.github.io/categories/EChats/Vue/"/>
    
    
    <category term="EChats" scheme="https://xuesenxu.github.io/tags/EChats/"/>
    
    <category term="Vue" scheme="https://xuesenxu.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Redux</title>
    <link href="https://xuesenxu.github.io/posts/cb417bc6.html"/>
    <id>https://xuesenxu.github.io/posts/cb417bc6.html</id>
    <published>2022-04-04T01:12:05.000Z</published>
    <updated>2022-09-19T09:28:14.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redux理解"><a href="#redux理解" class="headerlink" title="redux理解"></a>redux理解</h2><h3 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h3><ol><li><p>英文文档: <a href="https://redux.js.org/">https://redux.js.org/</a></p></li><li><p>中文文档: <a href="http://www.redux.org.cn/">http://www.redux.org.cn/</a></p></li><li><p>Github: <a href="https://github.com/reactjs/redux">https://github.com/reactjs/redux</a></p></li></ol><h3 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h3><ol><li><p>redux是一个专门用于做<strong>状态管理</strong>的JS库(不是react插件库)。</p></li><li><p>它可以用在react, angular, vue等项目中, 但基本与react配合使用。</p></li><li><p>作用: 集中式管理react应用中多个组件<strong>共享</strong>的状态。</p></li></ol><h3 id="什么情况下需要使用redux"><a href="#什么情况下需要使用redux" class="headerlink" title="什么情况下需要使用redux"></a>什么情况下需要使用redux</h3><ol><li><p>某个组件的状态，需要让其他组件可以随时拿到（共享）。</p></li><li><p>一个组件需要改变另一个组件的状态（通信）。</p></li><li><p>总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</p></li></ol><h3 id="redux工作流程"><a href="#redux工作流程" class="headerlink" title="redux工作流程"></a>redux工作流程</h3><p><img src="https://img-blog.csdnimg.cn/d67cd37014ed401784b47353d799682a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_14,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;../images/image-20220324131618306.png&quot; alt=&quot;image-20220324131618306&quot; style=&quot;zoom:200%;&quot; /&gt;"></p><h2 id="redux的三个核心概念"><a href="#redux的三个核心概念" class="headerlink" title="redux的三个核心概念"></a>redux的三个核心概念</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><ol><li><p>动作的对象</p></li><li><p>包含2个属性</p><ol><li>type：标识属性, 值为字符串, 唯一, 必要属性</li><li>data：数据属性, 值类型任意, 可选属性</li></ol></li><li><p>例子：<code>&#123; type: &#39;ADD_STUDENT&#39;,data:&#123;name: &#39;tom&#39;,age:18&#125; &#125;</code></p></li></ol><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><ol><li><p>用于初始化状态、加工状态。</p></li><li><p>加工时，根据旧的state和action， 产生新的state的<strong>纯函数**</strong>。**</p></li></ol><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><ol><li><p>将state、action、reducer联系在一起的对象</p></li><li><p>如何得到此对象?</p><p>1) <code>import &#123;createStore&#125; from &#39;redux&#39;</code></p><p>2) <code>import reducer from &#39;./reducers&#39;</code></p><p>3) <code>const store = createStore(reducer)</code></p></li><li><p>此对象的功能?</p><p>1) <code>getState()</code>: 得到state</p><p>2) <code>dispatch(action)</code>: 分发action, 触发reducer调用, 产生新的state</p><p>3) <code>subscribe(listener)</code>: 注册监听, 当产生了新的state时, 自动调用</p></li></ol><h2 id="redux的核心API"><a href="#redux的核心API" class="headerlink" title="redux的核心API"></a>redux的核心API</h2><h3 id="createstore"><a href="#createstore" class="headerlink" title="createstore()"></a>createstore()</h3><p>作用：创建包含指定reducer的store对象</p><h3 id="store对象"><a href="#store对象" class="headerlink" title="store对象"></a>store对象</h3><ol><li><p>作用: redux库最核心的管理对象</p></li><li><p>它内部维护着:</p><p>1) state</p><p>2) reducer</p></li><li><p>核心方法:</p><p>1) <code>getState()</code></p><p>2) <code>dispatch(action)</code></p><p>3) <code>subscribe(listener)</code></p></li><li><p>具体编码:</p><p>1) <code>store.getState()</code></p><p>2) <code>store.dispatch(&#123;type:&#39;INCREMENT&#39;, number&#125;)</code></p><p>3) <code>store.subscribe(render)</code></p></li></ol><h3 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware()"></a>applyMiddleware()</h3><p>作用：应用上基于redux的中间件(插件库)</p><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers()"></a>combineReducers()</h3><p>作用：合并多个reducer函数</p><h2 id="求和案例"><a href="#求和案例" class="headerlink" title="求和案例"></a>求和案例</h2><h3 id="React实现求和案例"><a href="#React实现求和案例" class="headerlink" title="React实现求和案例"></a>React实现求和案例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  state=&#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increament = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;sum&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">sum</span>:sum + value*<span class="number">1</span>&#125;)</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  decreament = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;sum&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">sum</span>:sum - value*<span class="number">1</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increamentOdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;sum&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">sum</span>:sum + <span class="number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increamentDelay = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;sum&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">count</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">sum</span>:sum + value*<span class="number">1</span>&#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;sum&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>数的合为：&#123;sum&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.count = c&#125; name=&quot;&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increament&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decreament&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increamentOdd&#125;</span>&gt;</span>奇数加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increamentDelay&#125;</span>&gt;</span>稍后加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过redux实现（不加Actions-Creators）的实现方式"><a href="#通过redux实现（不加Actions-Creators）的实现方式" class="headerlink" title="通过redux实现（不加Actions Creators）的实现方式"></a>通过redux实现（不加Actions Creators）的实现方式</h3><ol><li><p>安装redux：<code>npm i redux</code></p></li><li><p>创建redux文件夹，在文件夹下创建<code>store.js</code>和为某个组件单独创建一个<code>reducers</code>文件，在<code>store.js</code>文件中写入如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入createStore，专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer)</span><br></pre></td></tr></table></figure></li><li><p>在为某个单独组件比如<code>Count</code>组件创建的reducers文件中写入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1.该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数</span></span><br><span class="line"><span class="comment">2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initState = <span class="number">0</span> <span class="comment">//初始化状态</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">countReducer</span>(<span class="params">preState=initState,action</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(preState);</span></span><br><span class="line"><span class="comment">//从action对象中获取：type、data</span></span><br><span class="line"><span class="keyword">const</span> &#123;type,data&#125; = action</span><br><span class="line"><span class="comment">//根据type决定如何加工数据</span></span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>: <span class="comment">//如果是加</span></span><br><span class="line"><span class="keyword">return</span> preState + data</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>: <span class="comment">//若果是减</span></span><br><span class="line"><span class="keyword">return</span> preState - data</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="keyword">return</span> preState</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Count组件中写下如下代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入store，用于获取redux中保存状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 该块代码的作用是让redux中的代码发生改变时页面能够实现即时渲染，</span></span><br><span class="line"><span class="comment">不过该代码是在组件中实现</span></span><br><span class="line"><span class="comment">componentDidMount()&#123;</span></span><br><span class="line"><span class="comment">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class="line"><span class="comment">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;decrement&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//奇数再加</span></span><br><span class="line">incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line"><span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步加</span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment&#x27;</span>,<span class="attr">data</span>:value*<span class="number">1</span>&#125;)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在<code>index.js</code>入口文件中实现页面中的数据即时渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./redux/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>知识点整理：</strong></p><p>  (1).去除Count组件自身的状态</p><p>  (2).src下建立:</p><p>​      -redux</p><p>​       -store.js</p><p>​       -count_reducer.js</p><p>  (3).store.js：</p><p>​     1).引入redux中的createStore函数，创建一个store</p><p>​     2).createStore调用时要传入一个为其服务的reducer</p><p>​     3).记得暴露store对象</p><p>  (4).count_reducer.js：</p><p>​     1).reducer的本质是一个函数，接收：preState,action，返回加工后的状态</p><p>​     2).reducer有两个作用：初始化状态，加工状态</p><p>​     3).reducer被第一次调用时，是store自动触发的，</p><p>​         传递的preState是undefined,</p><p>​         传递的action是:{type:’@@REDUX/INIT_a.2.b.4}</p><p>  (5).在index.js中监测store中状态的改变，一旦发生改变重新渲染<App/></p><p>​    备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</p><h3 id="求和案例完整版（加上Actions对象）"><a href="#求和案例完整版（加上Actions对象）" class="headerlink" title="求和案例完整版（加上Actions对象）"></a>求和案例完整版（加上Actions对象）</h3><ol><li><p>在redux文件夹下创建一个专门为某一个组件服务的actions文件比如专门为count组件服务的<code>count_action.js</code>文件，中写入如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件专门为Count组件生成action对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最开始的写法如下：</span></span><br><span class="line"><span class="comment"> * createIncrementAction (data) &#123;</span></span><br><span class="line"><span class="comment"> * return &#123;type:INCREMENT,data&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; data </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对Count组件中的代码进行如下修改</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入store，用于获取redux中保存状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"><span class="comment">//引入actionCreator，专门用于创建action对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createIncrementAction,createDecrementAction&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* componentDidMount()&#123;</span></span><br><span class="line"><span class="comment">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class="line"><span class="comment">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//奇数再加</span></span><br><span class="line">incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line"><span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步加</span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建常量模块，防止单词写错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该模块是用于定义action对象中type类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;increment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;decrement&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>知识点整理：</strong></p><p>  新增文件：</p><ol><li><p>count_action.js 专门用于创建action对象</p></li><li><p>constant.js 放置容易写错的type值</p></li></ol><h3 id="异步Action"><a href="#异步Action" class="headerlink" title="异步Action"></a>异步Action</h3><p>   (1).明确：延迟的动作不想交给组件自身，想交给action</p><p>   (2).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。</p><p>   (3).具体编码：</p><p>​         1).<code>npm i redux-thunk</code>，并配置在store中</p><p>​         2).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。</p><p>​         3).异步任务有结果后，分发一个同步的action去真正操作数据。</p><p>   (4).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</p><ol><li><p>首先是在Count组件中进行如下修改，把异步的任务交给action文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入store，用于获取redux中保存状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"><span class="comment">//引入actionCreator，专门用于创建action对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">createIncrementAction,</span><br><span class="line">createDecrementAction,</span><br><span class="line">createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* componentDidMount()&#123;</span></span><br><span class="line"><span class="comment">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class="line"><span class="comment">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//奇数再加</span></span><br><span class="line">incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line"><span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步加</span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(value*<span class="number">1</span>,<span class="number">500</span>))</span><br><span class="line"><span class="comment">// &#125;,500)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在count_aciton文件中进行如下修改</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件专门为Count组件生成action对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">INCREMENT</span>,<span class="variable constant_">DECREMENT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./constant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同步action，就是指action的值为Object类型的一般对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">INCREMENT</span>,data&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDecrementAction</span> = data =&gt; (&#123;<span class="attr">type</span>:<span class="variable constant_">DECREMENT</span>,data&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步action，就是指action的值为函数,异步action中一般都会调用同步action，异步action不是必须要用的。</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createIncrementAsyncAction</span> = (<span class="params">data,time</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(data))</span><br><span class="line">&#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Count组件中进行如下修改</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入store，用于获取redux中保存状态</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../../redux/store&#x27;</span></span><br><span class="line"><span class="comment">//引入actionCreator，专门用于创建action对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">createIncrementAction,</span><br><span class="line">createDecrementAction,</span><br><span class="line">createIncrementAsyncAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../../redux/count_action&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰c63&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* componentDidMount()&#123;</span></span><br><span class="line"><span class="comment">//检测redux中状态的变化，只要变化，就调用render</span></span><br><span class="line"><span class="comment">store.subscribe(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">this.setState(&#123;&#125;)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line">increment = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line">decrement = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createDecrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//奇数再加</span></span><br><span class="line">incrementIfOdd = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="keyword">const</span> count = store.<span class="title function_">getState</span>()</span><br><span class="line"><span class="keyword">if</span>(count % <span class="number">2</span> !== <span class="number">0</span>)&#123;</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAction</span>(value*<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步加</span></span><br><span class="line">incrementAsync = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="variable language_">this</span>.<span class="property">selectNumber</span></span><br><span class="line"><span class="comment">// setTimeout(()=&gt;&#123;</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">createIncrementAsyncAction</span>(value*<span class="number">1</span>,<span class="number">500</span>))</span><br><span class="line"><span class="comment">// &#125;,500)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前求和为：&#123;store.getState()&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.selectNumber = c&#125;&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementIfOdd&#125;</span>&gt;</span>当前求和为奇数再加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.incrementAsync&#125;</span>&gt;</span>异步加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在store文件中引入插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">该文件专门用于暴露一个store对象，整个应用只有一个store对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入createStore，专门用于创建redux中最为核心的store对象</span></span><br><span class="line"><span class="keyword">import</span> &#123;createStore,applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">//引入为Count组件服务的reducer</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&#x27;./count_reducer&#x27;</span></span><br><span class="line"><span class="comment">//引入redux-thunk，用于支持异步action</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="comment">//暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(countReducer,<span class="title function_">applyMiddleware</span>(thunk))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redux理解&quot;&gt;&lt;a href=&quot;#redux理解&quot; class=&quot;headerlink&quot; title=&quot;redux理解&quot;&gt;&lt;/a&gt;redux理解&lt;/h2&gt;&lt;h3 id=&quot;学习文档&quot;&gt;&lt;a href=&quot;#学习文档&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    <category term="Redux" scheme="https://xuesenxu.github.io/categories/React/Redux/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
    <category term="Redux" scheme="https://xuesenxu.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>React路由</title>
    <link href="https://xuesenxu.github.io/posts/39de9223.html"/>
    <id>https://xuesenxu.github.io/posts/39de9223.html</id>
    <published>2022-03-25T12:10:53.000Z</published>
    <updated>2022-09-19T09:28:14.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-router-dom的理解"><a href="#react-router-dom的理解" class="headerlink" title="react-router-dom的理解"></a>react-router-dom的理解</h2><ol><li><p>react的一个插件库。</p></li><li><p>专门用来实现一个SPA应用。</p></li><li><p>基于react的项目基本都会用到此库。</p></li></ol><h2 id="react-router-dom相关API"><a href="#react-router-dom相关API" class="headerlink" title="react-router-dom相关API"></a>react-router-dom相关API</h2><h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h3><ol><li><p><code>&lt;BrowserRouter&gt;</code></p></li><li><p><code>&lt;HashRouter&gt;</code></p></li><li><p><code>&lt;Route&gt;</code></p></li><li><p><code>&lt;Redirect&gt;</code></p></li><li><p><code>&lt;Link&gt;</code></p></li><li><p><code>&lt;NavLink&gt;</code></p></li><li><p><code>&lt;Switch&gt;</code></p></li></ol><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ol><li><p>history对象</p></li><li><p>match对象</p></li><li><p>withRouter函数</p></li></ol><h2 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>下载<strong>react-router-dom:</strong><code> </code></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p><code>index.js</code>文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入react核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入ReactDOM</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BrowserRouter</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>App.jsx</code>文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>明确界面中的展示区和导航区</li><li>导航区的<code>a</code>标签改为<code>linke</code>标签<ol><li><code>&lt;Link to=&quot;/xxx&quot; &gt;Demo&lt;/Link&gt;</code></li></ol></li><li>展示区写<code>Route</code>标签进行路由匹配<ol><li><code>&lt;Route path=&quot;/xxx&quot; component=&#123;xxx&#125;&gt;</code></li></ol></li><li><code>App</code>最外侧包裹一个<code>&lt;BrowerRouter&gt;&lt;/BrowerRouter&gt;</code></li><li>注意以上写法是用于React5及其以下版本</li></ol><h3 id="路由组件与一般组件的不同"><a href="#路由组件与一般组件的不同" class="headerlink" title="路由组件与一般组件的不同"></a>路由组件与一般组件的不同</h3><ol><li>写法不同：</li></ol><p>​      一般组件：<code>&lt;Demo/&gt;</code></p><p>​      路由组件：<code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</code></p><ol><li>存放位置不同：</li></ol><p>​      一般组件：components</p><p>​      路由组件：pages</p><ol><li>接收到的props不同：</li></ol><p>​      一般组件：写组件标签时传递了什么，就能收到什么</p><p>​      路由组件：接收到三个固定的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">           <span class="attr">history</span>:</span><br><span class="line"></span><br><span class="line">​              <span class="attr">go</span>: ƒ <span class="title function_">go</span>(n)</span><br><span class="line"></span><br><span class="line">​              <span class="attr">goBack</span>: ƒ <span class="title function_">goBack</span>()</span><br><span class="line"></span><br><span class="line">​              <span class="attr">goForward</span>: ƒ <span class="title function_">goForward</span>()</span><br><span class="line"></span><br><span class="line">​              <span class="attr">push</span>: ƒ <span class="title function_">push</span>(path, state)</span><br><span class="line"></span><br><span class="line">​              <span class="attr">replace</span>: ƒ <span class="title function_">replace</span>(path, state)</span><br><span class="line"></span><br><span class="line">​           <span class="attr">location</span>:</span><br><span class="line"></span><br><span class="line">​              <span class="attr">pathname</span>: <span class="string">&quot;/about&quot;</span></span><br><span class="line"></span><br><span class="line">​              <span class="attr">search</span>: <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">​              <span class="attr">state</span>: <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">​           <span class="attr">match</span>:</span><br><span class="line"></span><br><span class="line">​              <span class="attr">params</span>: &#123;&#125;</span><br><span class="line"></span><br><span class="line">​              <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span></span><br><span class="line"></span><br><span class="line">​              <span class="attr">url</span>: <span class="string">&quot;/about&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Switch的使用"><a href="#Switch的使用" class="headerlink" title="Switch的使用"></a><strong>Switch的使用</strong></h3><p>​    1.通常情况下，path和component是一一对应的关系。</p><p>​    2.Switch可以提高路由匹配效率(单一匹配)。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span> <span class="comment">//Home是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span> <span class="comment">//About是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span> <span class="comment">//Header是一般组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyNavLink</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyNavLink&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Test&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="路由的精准匹配与模糊匹配"><a href="#路由的精准匹配与模糊匹配" class="headerlink" title="路由的精准匹配与模糊匹配"></a>路由的精准匹配与模糊匹配</h3><ol><li><p>默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）</p></li><li><p>开启严格匹配：<code>&lt;Route exact=&#123;true&#125; path=&quot;/about&quot; component=&#123;About&#125;/&gt;</code></p></li><li><p>严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span> <span class="comment">//Home是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span> <span class="comment">//About是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span> <span class="comment">//Header是一般组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyNavLink</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyNavLink&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/a/b&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">exact</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a><strong>Redirect的使用</strong></h3><ol><li><p>一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由</p></li><li><p>具体编码：</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Switch</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Switch</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>,<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/Home&#x27;</span> <span class="comment">//Home是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./pages/About&#x27;</span> <span class="comment">//About是路由组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header&#x27;</span> <span class="comment">//Header是一般组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyNavLink</span> <span class="keyword">from</span> <span class="string">&#x27;./components/MyNavLink&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-offset-2 col-xs-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Header</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-2 col-xs-offset-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 原生html中，靠<span class="tag">&lt;<span class="name">a</span>&gt;</span>跳转不同的页面 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./about.html&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;list-group-item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./home.html&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 在React中靠路由链接实现切换组件--编写路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;col-xs-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">component</span>=<span class="string">&#123;About&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a><strong>嵌套路由</strong></h3><ol><li><p>注册子路由时要写上父路由的path值</p></li><li><p>路由的匹配是按照注册路由的顺序进行的</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyNavLink</span> <span class="keyword">from</span> <span class="string">&#x27;../../components/MyNavLink&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>,<span class="title class_">Switch</span>,<span class="title class_">Redirect</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;./News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;./Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是Home的内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;nav nav-tabs&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&quot;/home/message&quot;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/news&quot;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向路由组件传递参数"><a href="#向路由组件传递参数" class="headerlink" title="向路由组件传递参数"></a>向路由组件传递参数</h3><ol><li>params参数</li></ol><p>​       路由链接(携带参数)：<code>&lt;Link to=&#39;/demo/test/tom/18&#39;&#125;&gt;</code>详情<code>&lt;/Link&gt;</code></p><p>​       注册路由(声明接收)：<code>&lt;Route path=&quot;/demo/test/:name/:age&quot; component=&#123;Test&#125;/&gt;</code></p><p>​       接收参数：<code>this.props.match.params</code></p><p><code>Message</code>组件的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">messageArr</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;</span></span><br><span class="line"><span class="language-xml">messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">return (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Detail</code>组件的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line"><span class="comment">// 接收params参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span></span><br><span class="line"><span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>search参数</li></ol><p>​       路由链接(携带参数)：<code>&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;&#125;&gt;</code>详情<code>&lt;/Link&gt;</code></p><p>​       注册路由(无需声明，正常注册即可)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></p><p>​       接收参数：<code>this.props.location.search</code></p><p>​       备注：获取到的<code>search</code>是<code>urlencoded</code>编码字符串，需要借助<code>querystring</code>解析</p><p><code>Message</code>组件代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">messageArr</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;</span></span><br><span class="line"><span class="language-xml">messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">return (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递search参数 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Detail</code>组件的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;querystring&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收params参数</span></span><br><span class="line"><span class="comment">// const &#123;id,title&#125; = this.props.match.params </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收search参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;search&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span></span><br><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = qs.<span class="title function_">parse</span>(search.<span class="title function_">slice</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>state参数</li></ol><p>​       路由链接(携带参数)：<code>&lt;Link to=&#123;&#123;pathname:'/demo/test',state:&#123;name:'tom',age:18&#125;&#125;&#125;&gt;</code>详情<code>&lt;/Link&gt;</code></p><p>​       注册路由(无需声明，正常注册即可)：<code>&lt;Route path=&quot;/demo/test&quot; component=&#123;Test&#125;/&gt;</code></p><p>​       接收参数：<code>this.props.location.state</code></p><p>​       备注：刷新也可以保留住参数<br><code>Message</code>组件代码<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">messageArr</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;</span></span><br><span class="line"><span class="language-xml">messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">return (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递search参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递state参数 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">id:msgObj.id</span>,<span class="attr">title:msgObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* state参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>Detail</code>组件代码<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// import qs from &#x27;querystring&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DetailData</span> = [</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，中国&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你好，未来的自己&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Detail</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收params参数</span></span><br><span class="line"><span class="comment">// const &#123;id,title&#125; = this.props.match.params </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收search参数</span></span><br><span class="line"><span class="comment">// const &#123;search&#125; = this.props.location</span></span><br><span class="line"><span class="comment">// const &#123;id,title&#125; = qs.parse(search.slice(1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收state参数</span></span><br><span class="line"><span class="keyword">const</span> &#123;id,title&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">state</span> || &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findResult = <span class="title class_">DetailData</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">detailObj</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> detailObj.<span class="property">id</span> === id</span><br><span class="line">&#125;) || &#123;&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;findResult.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a><strong>编程式路由导航</strong></h3><p>​     借助this.prosp.history对象上的API对操作路由跳转、前进、后退</p><ul><li><p><code>this.prosp.history.push()</code></p></li><li><p><code>this.prosp.history.replace()</code></p></li><li><p><code>this.prosp.history.goBack()</code></p></li><li><p><code>this.prosp.history.goForward()</code></p></li><li><p><code>this.prosp.history.go()</code></p></li></ul><p><code>Message</code>组件代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>,<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;./Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">messageArr</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息1&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息2&#x27;</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,<span class="attr">title</span>:<span class="string">&#x27;消息3&#x27;</span>&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">replaceShow = <span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//replace跳转+携带params参数</span></span><br><span class="line"><span class="comment">//this.props.history.replace(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace跳转+携带search参数</span></span><br><span class="line"><span class="comment">// this.props.history.replace(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace跳转+携带state参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">replace</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pushShow = <span class="function">(<span class="params">id,title</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//push跳转+携带params参数</span></span><br><span class="line"><span class="comment">// this.props.history.push(`/home/message/detail/$&#123;id&#125;/$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push跳转+携带search参数</span></span><br><span class="line"><span class="comment">// this.props.history.push(`/home/message/detail?id=$&#123;id&#125;&amp;title=$&#123;title&#125;`)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//push跳转+携带state参数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">`/home/message/detail`</span>,&#123;id,title&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">back = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forward = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;messageArr&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;</span></span><br><span class="line"><span class="language-xml">messageArr.map((msgObj)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">return (</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;msgObj.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">msgObj.id</span>&#125;/$&#123;<span class="attr">msgObj.title</span>&#125;`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递search参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/?<span class="attr">id</span>=<span class="string">$&#123;msgObj.id&#125;&amp;title</span>=<span class="string">$&#123;msgObj.title&#125;</span>`&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* 向路由组件传递state参数 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;&#123;pathname:</span>&#x27;/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>&#x27;,<span class="attr">state:</span>&#123;<span class="attr">id:msgObj.id</span>,<span class="attr">title:msgObj.title</span>&#125;&#125;&#125;&gt;</span>&#123;msgObj.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> this.pushShow(msgObj.id,msgObj.title)&#125;&gt;push查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span> this.replaceShow(msgObj.id,msgObj.title)&#125;&gt;replace查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;/* 声明接收params参数 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail/:id/:title&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* search参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml">&#123;/* <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&#123;/* state参数无需声明接收，正常注册路由即可 */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home/message/detail&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Detail&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="withRouter的使用"><a href="#withRouter的使用" class="headerlink" title="withRouter的使用"></a>withRouter的使用</h3><p>普通组件<code>Header</code>组件中的代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">back = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goBack</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forward = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">goForward</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Header组件收到的props是&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>React Router Demo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.back&#125;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.forward&#125;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.go&#125;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withRouter</span>(<span class="title class_">Header</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//withRouter可以加工一般组件，让一般组件具备路由组件所特有的API</span></span><br><span class="line"><span class="comment">//withRouter的返回值是一个新组件</span></span><br></pre></td></tr></table></figure><h3 id="BrowserRouter与HashRouter的区别"><a href="#BrowserRouter与HashRouter的区别" class="headerlink" title="BrowserRouter与HashRouter的区别"></a><strong>BrowserRouter与HashRouter的区别</strong></h3><p>   1.底层原理不一样：</p><p>​      BrowserRouter使用的是H5的history API，不兼容IE9及以下版本。</p><p>​      HashRouter使用的是URL的哈希值。</p><p>   2.path表现形式不一样</p><p>​      BrowserRouter的路径中没有#,例如：localhost:3000/demo/test</p><p>​      HashRouter的路径包含#,例如：localhost:3000/#/demo/test</p><p>   3.刷新后对路由state参数的影响</p><p>​      (1).BrowserRouter没有任何影响，因为state保存在history对象中。</p><p>​      (2).HashRouter刷新后会导致路由state参数的丢失！！！</p><p>   4.备注：HashRouter可以用于解决一些路径错误相关的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react-router-dom的理解&quot;&gt;&lt;a href=&quot;#react-router-dom的理解&quot; class=&quot;headerlink&quot; title=&quot;react-router-dom的理解&quot;&gt;&lt;/a&gt;react-router-dom的理解&lt;/h2&gt;&lt;ol&gt;
</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React入门</title>
    <link href="https://xuesenxu.github.io/posts/74c45c76.html"/>
    <id>https://xuesenxu.github.io/posts/74c45c76.html</id>
    <published>2022-03-25T12:10:53.000Z</published>
    <updated>2022-09-19T09:28:14.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-React入门"><a href="#1-React入门" class="headerlink" title="1 React入门"></a>1 React入门</h1><h2 id="1-1-React简介"><a href="#1-1-React简介" class="headerlink" title="1.1 React简介"></a>1.1 React简介</h2><ol><li><p>什么是<code>React</code>？</p><p>是一个将数据渲染为<code>HTML</code>视图的开源<code>JavaScript库</code>。也就是说React只负责操作DOM其他的什么都不管。</p></li><li><p>为什么要学<code>React</code>？</p><ol><li>原生<code>JavaScript</code>的痛点<ol><li>原生JavaScript操作DOM繁琐、效率低（DOM-API操作U ) 。</li><li>使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排。</li><li>原生JavaScript没有组件化编码方案，代码复用率低。</li></ol></li><li><code>React</code>的特点<ol><li>采用组件化模式、声明式编码，提高开发效率及组件复用率。</li><li>在React Native中可以使用React语法进行移动端开发。</li><li>使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互。</li></ol></li></ol></li><li><p>官网：</p><p><a href="https://reactjs.org/"> 英文官网:https://reactjs.org/</a></p><p><a href="https://react.docschina.org/">中文官网: https://react.docschina.org/</a></p></li><li><p>依赖包</p><ol><li><p>旧版本的依赖包：</p><p><code>babel.min.js</code>文件主要是将<code>ES6</code>语法转为<code>ES5</code>语法，将<code>jsx</code>转为<code>js</code></p><p><code>react.development.js</code>是React的核心库</p><p><code>react-dom.development.js</code>是React的扩展库</p></li></ol></li></ol><h2 id="1-2-React实现Hello-World案例"><a href="#1-2-React实现Hello-World案例" class="headerlink" title="1.2 React实现Hello World案例"></a>1.2 React实现Hello World案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel；，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"><span class="comment">/*此处一定要写babel，因为我们下面写的不是js代码而是jsp代码*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span>  = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="comment">/*此处也不要写引号，因为此处不是字符串*/</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.渲染虚拟DOM到页面，使用ReatDOM方法，格式：ReactDOM.render(虚拟DOM,容器)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))<span class="comment">/*该语句不是追加语句而是覆盖语句*/</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-虚拟DOM的两种创建方式"><a href="#1-3-虚拟DOM的两种创建方式" class="headerlink" title="1.3 虚拟DOM的两种创建方式"></a>1.3 虚拟DOM的两种创建方式</h2><ol><li><p>纯<code>JS</code>方式（一般不用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const VDOM = React.createElement(标签，标签属性，标签内容)</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;title&#x27;</span>&#125;,<span class="string">&#x27;Hello World&#x27;</span>);</span><br></pre></td></tr></table></figure><p>最终渲染出来的标签解构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;title&#x27;</span>&#125;,<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="string">&#x27;Hello React&#x27;</span>))</span><br></pre></td></tr></table></figure><p>最终渲染出来的标签解构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>JSX</code>的写法如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (<span class="comment">/*此处一定不要写引号*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><p>第一种方式在我们平时的开发过程中很少会被用到，但是第二种在解析的时候最终会被解析为第一种方式，所以第二种的方式是第一种方式的语法糖</p><h2 id="1-4-真实DOM与虚拟DOM"><a href="#1-4-真实DOM与虚拟DOM" class="headerlink" title="1.4 真实DOM与虚拟DOM"></a>1.4 真实DOM与虚拟DOM</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虚拟DOM&#x27;</span>,<span class="variable constant_">VDOM</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真实DOM&#x27;</span>,<span class="variable constant_">TDOM</span>);</span><br></pre></td></tr></table></figure><p>关于虚拟DOM：</p><ol><li>本质是Object类型的对象（一般对象）</li><li>虚拟DOM比较“轻”，真是DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多属性</li><li>虚拟DOM最终会被React转换为真是DOM，呈现在页面上。</li></ol><h2 id="1-5-JSX语法规则"><a href="#1-5-JSX语法规则" class="headerlink" title="1.5 JSX语法规则"></a>1.5 <code>JSX</code>语法规则</h2><ol><li>全称：<code>JavaScript XML</code></li><li><code>react</code>定义的一种类似于<code>XML</code>的<code>JS</code>扩展语法：<code>JS+XML</code></li><li>本质是<code>React.createElement(component,props,...children)</code>方法的语法糖</li><li>作用是：用来简化创建虚拟DOM<ol><li>写法：<code>var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</code></li><li>注意1：它不是字符串，也不是<code>HTML/XML</code>标签</li><li>注意2：它最终产生的就是一个JS对象</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel；，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> myId = <span class="string">&#x27;aPp&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> myData = <span class="string">&#x27;HeLlo WORld&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toUpperCase()&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">white</span>&#x27;,<span class="attr">fontSize:</span>&#x27;<span class="attr">50px</span>&#x27;&#125;&#125;&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            JSX语法规则：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                1.定义虚拟DOM时，不要写引号</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                2.标签中混入JS表达式是要用&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                3.样式的类名指定不要用class，要用className</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                4.内联样式，要用style=&#123;&#123;key:value&#125;&#125;的形式去写，而且样式的名称不能用横线去连接，而是采用小驼峰命名法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                5.只有一个根标签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                6.标签必须闭合</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                7.标签首字母</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    a.若小写字母开头，则将该标签转为HTML中同名元素，若HTML中无该标签对应的同名元素则报错</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    b.若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-js表达式与语句"><a href="#1-6-js表达式与语句" class="headerlink" title="1.6 js表达式与语句"></a>1.6 <code>js</code>表达式与语句</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx小练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一定注意区分：【js语句(代码)】与【js表达式】</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">下面这些都是表达式：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(1). a</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(2). a+b</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(3). demo(1)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(4). arr.map() </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(5). function test () &#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2.语句(代码)：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">下面这些都是语句(代码)：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(1).if()&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(2).for()&#123;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(3).switch()&#123;case:xxxx&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//模拟一些数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>,<span class="string">&#x27;React&#x27;</span>,<span class="string">&#x27;Vue&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">data.map((item,index)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-7-组件化与模块化"><a href="#1-7-组件化与模块化" class="headerlink" title="1.7 组件化与模块化"></a>1.7 组件化与模块化</h2><ol><li>模块<ol><li>理解：向外提供特定功能的<code>js</code>程序, 一般就是一个<code>js</code>文件</li><li>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</li><li>作用：复用<code>js</code>, 简化<code>js</code>的编写, 提高<code>js</code>运行效率</li></ol></li><li>组件<ol><li>理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</li><li>为什么要用组件： 一个界面的功能更复杂</li><li>作用：复用编码, 简化项目编码, 提高运行效率</li></ol></li><li>模块化<ol><li>当应用的<code>js</code>都以模块来编写的, 这个应用就是一个模块化的应用</li></ol></li><li>组件化<ol><li>当应用是以多组件的方式实现, 这个应用就是一个组件化的应用</li></ol></li></ol><h1 id="2-React面向组件编程"><a href="#2-React面向组件编程" class="headerlink" title="2 React面向组件编程"></a>2 React面向组件编程</h1><h2 id="2-1-函数式组件"><a href="#2-1-函数式组件" class="headerlink" title="2.1 函数式组件"></a>2.1 函数式组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>1_函数式组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建函数式组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//此处的this是undefined，因为babel编译后开启了严格模式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    1.React解析组件标签，找到了MyComponent组件。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-ES6类的创建"><a href="#2-2-ES6类的创建" class="headerlink" title="2.2 ES6类的创建"></a>2.2 ES6类的创建</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>1_类的基本知识<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建一个Person类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//构造器方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//构造器中的this是谁？—— 类的实例对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = name</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">age</span> = age</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//一般方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//speak方法放在了哪里？——类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过Person实例调用speak时，speak中的this就是Person实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建一个Student类，继承于Person类</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">name,age,grade</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(name,age)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">grade</span> = grade</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">school</span> = <span class="string">&#x27;河南师范大学&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//重写从父类继承过来的方法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>,我读的是<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">study</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">study</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//study方法放在了哪里？——类的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过Student实例调用study时，study中的this就是Student实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我很努力的学习&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ol><li>类中的构造器不是必须要写的，要对实例进行一些初始化的操作，如添加指定属性时才写。</li><li>如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的。</li><li>类中所定义的方法，都放在了类的原型对象上，供实例去使用。</li></ol><h2 id="2-3-类式组件"><a href="#2-3-类式组件" class="headerlink" title="2.3 类式组件"></a>2.3 类式组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>2_类式组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建类式组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render中的this:&#x27;</span>,<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    1.React解析组件标签，找到了MyComponent组件。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-组件实例的三大核心属性1：state"><a href="#2-4-组件实例的三大核心属性1：state" class="headerlink" title="2.4 组件实例的三大核心属性1：state"></a>2.4 组件实例的三大核心属性1：<code>state</code></h2><p>如何区分简单组件与复杂组件？</p><p>如果是简单组件就没有state，如果是复杂组件就有state</p><p>什么是state？</p><ol><li><code>state</code>是组件对象最重要的属性，值是对象（可以包含多个<code>key-value</code>的组合）</li><li>组件被称为“状态机”，通过更新组件的state来更新对页面的显示（重新渲染组件）</li></ol><h3 id="2-4-1-初始化state"><a href="#2-4-1-初始化state" class="headerlink" title="2.4.1 初始化state"></a>2.4.1 初始化<code>state</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//构造器调用几次？ ———— 1次</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//读取状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-事件绑定"><a href="#2-4-2-事件绑定" class="headerlink" title="2.4.2 事件绑定"></a>2.4.2 事件绑定</h3><p>关于事件绑定，在原生的<code>js</code>中事件绑定是<code>onclick=&quot;方法名()&quot;</code>,但是在<code>react</code>也就是在<code>jsx</code>语法中，事件的绑定是<code>onClick=&#123;this.方法名.bind(this)&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.创建组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//读取状态</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span></span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-setState方法"><a href="#2-4-3-setState方法" class="headerlink" title="2.4.3 setState方法"></a>2.4.3 <code>setState</code>方法</h3><p>在<code>react</code>组件中<code>state</code>中的数据不能直接进行修改，只能过<code>setState</code>方法进行修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//构造器调用几次？ ———— 1次</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//解决changeWeather中this指向问题</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//读取状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//changeWeather调用几次？ ———— 点几次调几次</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;changeWeather&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取原来的isHot值</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//this.state.isHot = !isHot //这是错误的写法</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-setState方法的简写形式"><a href="#2-4-4-setState方法的简写形式" class="headerlink" title="2.4.4 setState方法的简写形式"></a>2.4.4 <code>setState</code>方法的简写形式</h3><p>由于<code>state</code>属性不需要初始化的时候就调用所以不需要写在构造器里面，可以直接写在对象中。而当绑定时间的方法采用箭头函数赋值时，调用时的<code>this</code>自动指向外面的<code>this</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>state简写方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//自定义方法————要用赋值语句的形式+箭头函数</span></span></span><br><span class="line"><span class="language-javascript">changeWeather = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-组件实例的三大核心属性2props"><a href="#2-5-组件实例的三大核心属性2props" class="headerlink" title="2.5 组件实例的三大核心属性2props"></a>2.5 组件实例的三大核心属性2<code>props</code></h2><p>如何展示一下数据：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tH5V1bPh-1647226095650)(../images/image-20220305204033978.png)]</p><h3 id="2-5-1-props的基本使用"><a href="#2-5-1-props的基本使用" class="headerlink" title="2.5.1 props的基本使用"></a>2.5.1 <code>props</code>的基本使用</h3><p>类似于<code>Vue</code>组件中的父子传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>props的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span><br><span class="line"><span class="language-javascript">             render () &#123;</span></span><br><span class="line"><span class="language-javascript">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//  return (</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//      &lt;ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &lt;li&gt;&#123;this.props.name&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &lt;li&gt;&#123;this.props.age&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//         &lt;li&gt;&#123;this.props.sex&#125;&lt;/li&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//     &lt;/ul&gt;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//  )</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 也可以简写为：</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123;name,sex,age&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">                    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">                )</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;张三&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;15&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">         <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;李四&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;16&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;女&#x27;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">         <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#x27;王五&#x27;</span> <span class="attr">age</span>=<span class="string">&#x27;17&#x27;</span> <span class="attr">sex</span>=<span class="string">&#x27;男&#x27;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test3&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">         </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">const</span> p = &#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">age</span>:<span class="number">45</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">         <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test4&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-对props进行限制"><a href="#2-5-2-对props进行限制" class="headerlink" title="2.5.2 对props进行限制"></a>2.5.2 对<code>props</code>进行限制</h3><p>对props进行限制时，我们需要对先引入<code>prop-types.js</code>文件，引入该文件之后就可以在<code>React</code>组件化实例对象中调用<code>propTypes</code>方法对标签传入的属性进行限制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>对props进行限制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this);</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//props是只读的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span>,<span class="comment">//限制speak为函数</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指定默认标签属性值</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;100&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;/</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&#x27;@&#x27;,...p);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test3&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我说话了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><font color="red">`props`属性是一个只读属性，也就是说只能读取不能修改</font><h3 id="2-5-3-props的简写方式"><a href="#2-5-3-props的简写方式" class="headerlink" title="2.5.3 props的简写方式"></a>2.5.3 <code>props</code>的简写方式</h3><p>在上面的案例中对<code>props</code>进行限制的代码块以及给他们添加默认值得代码块都写在了组件化实例对象外面，但是我们可以将其写在组件化实例对象里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>对props进行限制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(props);</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//对标签属性进行类型、必要性的限制</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">static</span> propTypes = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指定默认标签属性值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">static</span> defaultProps = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(this);</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//props是只读的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-组件实例的三大核心属性3-refs"><a href="#2-6-组件实例的三大核心属性3-refs" class="headerlink" title="2.6 组件实例的三大核心属性3 refs"></a>2.6 组件实例的三大核心属性3 <code>refs</code></h2><p>该属性相当于标签的<code>id</code>属性用来标识组件内标签的唯一性</p><h3 id="2-6-1-字符串形式的ref"><a href="#2-6-1-字符串形式的ref" class="headerlink" title="2.6.1 字符串形式的ref"></a>2.6.1 字符串形式的<code>ref</code></h3><p>直接用<code>ref</code>替换<code>id</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_字符串形式的ref<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示左侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示右侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData2 = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(input2.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不建议使用这种形式的<code>refs</code>，因为这种<code>refs</code>存在一些问题。它已过时并可能会在未来的版本被移除。</p><h3 id="2-6-2-回调形式的refs"><a href="#2-6-2-回调形式的refs" class="headerlink" title="2.6.2 回调形式的refs"></a>2.6.2 回调形式的<code>refs</code></h3><p>第一种写法：内联函数的定义方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_字符串形式的ref<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示左侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示右侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData2 = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(input2.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#123;/*在这里，用一个箭头型的回调函数来替代之前的字符串形式的ref，之前是将标签绑定到实例对象的refs属性里面，现在是直接绑定到了实例对象身上*/&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 <code>ref</code> 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 <code>null</code>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p><p>第二种写法：<code>class</code>的绑定函数方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>refs函数调用式的第二种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">showInfo = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">changeWeather = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取原来的状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//更新状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">saveInput = <span class="function">(<span class="params">c</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">input1</span> = c;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,c);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">&#123;/*<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span>=&gt;</span>&#123;this.input1 = c;console.log(&#x27;@&#x27;,c);&#125;&#125; type=&quot;text&quot;/&gt;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>*/&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showInfo&#125;</span>&gt;</span>点我提示输入的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>点我切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-3-createRef创建ref容器"><a href="#2-6-3-createRef创建ref容器" class="headerlink" title="2.6.3 createRef创建ref容器"></a>2.6.3 createRef创建ref容器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>4_createRef<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript">myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript">myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示左侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示右侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData2 = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-React中的事件处理"><a href="#2-7-React中的事件处理" class="headerlink" title="2.7 React中的事件处理"></a>2.7 <code>React</code>中的事件处理</h2><ol><li>通过onXxx属性指定事件处理函数（注意大小写）<ol><li>React使用的是自定义事件，而不是使用原生DOM事件是——为了更好的兼容性</li><li>React中的事件是通过事件委托方式处理的（委托给组件最外层的元素）——为了提高效率</li></ol></li><li>通过<code>event.target</code>得到发生事件的DOM元素对象——不要过度的使用refs属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(1).通过onXxx属性指定事件处理函数(注意大小写)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">(2).通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建ref容器</span></span></span><br><span class="line"><span class="language-javascript">myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript">myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示左侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//展示右侧输入框的数据</span></span></span><br><span class="line"><span class="language-javascript">showData2 = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-8-收集表单数据"><a href="#2-8-收集表单数据" class="headerlink" title="2.8 收集表单数据"></a>2.8 收集表单数据</h2><h3 id="2-8-1-非受控组件"><a href="#2-8-1-非受控组件" class="headerlink" title="2.8.1 非受控组件"></a>2.8.1 非受控组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_非受控组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username.value&#125;</span>,你输入的密码是：<span class="subst">$&#123;password.value&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单中的数据现用现取。</p><h3 id="2-8-2-受控组件"><a href="#2-8-2-受控组件" class="headerlink" title="2.8.2 受控组件"></a>2.8.2 受控组件</h3><p>受控组件就是从输入DOM中获取到的数据存储到状态（state）里面，当用到需要取的时候直接从状态（state）里面取，类似于Vue中的双向绑定，但是React中没有双向绑定，所以只能通过一些特殊的方法做到。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>2_受控组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">state = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存用户名到状态中</span></span></span><br><span class="line"><span class="language-javascript">saveUsername = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存密码到状态中</span></span></span><br><span class="line"><span class="language-javascript">savePassword = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//表单提交的回调</span></span></span><br><span class="line"><span class="language-javascript">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-8-3-高阶函数-函数柯里化"><a href="#2-8-3-高阶函数-函数柯里化" class="headerlink" title="2.8.3 高阶函数_函数柯里化"></a>2.8.3 高阶函数_函数柯里化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>2_受控组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">state = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存用户名到状态中</span></span></span><br><span class="line"><span class="language-javascript">saveUsername = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存密码到状态中</span></span></span><br><span class="line"><span class="language-javascript">savePassword = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//表单提交的回调</span></span></span><br><span class="line"><span class="language-javascript">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-8-4-不用函数柯里化"><a href="#2-8-4-不用函数柯里化" class="headerlink" title="2.8.4 不用函数柯里化"></a>2.8.4 不用函数柯里化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>2_不用函数柯里化的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript">state = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//保存表单数据到状态中</span></span></span><br><span class="line"><span class="language-javascript">saveFormData = <span class="function">(<span class="params">dataType,event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//表单提交的回调</span></span></span><br><span class="line"><span class="language-javascript">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-9-生命周期"><a href="#2-9-生命周期" class="headerlink" title="2.9 生命周期"></a>2.9 生命周期</h2><h3 id="2-9-1-引出生命周期"><a href="#2-9-1-引出生命周期" class="headerlink" title="2.9.1 引出生命周期"></a>2.9.1 引出生命周期</h3><p>首先我们来尝试着实现如下功能：</p><ul><li>让指定的文本做显示/隐藏动画</li><li>点击一个按钮让整个页面中的内容全部消失</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;1_引出生命周期&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">//创建组件</span><br><span class="line">//生命周期回调函数 &lt;=&gt; 生命周期钩子函数 &lt;=&gt; 生命周期函数 &lt;=&gt; 生命周期钩子</span><br><span class="line">class Life extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">state = &#123;opacity:1&#125;</span><br><span class="line"></span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line">//卸载组件</span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件挂完毕</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(&#x27;componentDidMount&#x27;);</span><br><span class="line">this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">//获取原状态</span><br><span class="line">let &#123;opacity&#125; = this.state</span><br><span class="line">//减小0.1</span><br><span class="line">opacity -= 0.1</span><br><span class="line">if(opacity &lt;= 0) opacity = 1</span><br><span class="line">//设置新的透明度</span><br><span class="line">this.setState(&#123;opacity&#125;)</span><br><span class="line">&#125;, 200);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要卸载</span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line">//清除定时器</span><br><span class="line">clearInterval(this.timer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化渲染、状态更新之后</span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&#x27;render&#x27;);</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2 style=&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;React学不会怎么办？&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.death&#125;&gt;不活了&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Life/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>React现在有两套生命周期钩子函数，一套是新的生命周期钩子函数，一套是旧的生命周期钩子函数，新的相对于旧的来说是删除了两个生命周期钩子函数，然后又新增了三个生命周期钩子函数。</p><h3 id="2-9-2-生命周期流程-旧"><a href="#2-9-2-生命周期流程-旧" class="headerlink" title="2.9.2 生命周期流程(旧)"></a>2.9.2 生命周期流程(旧)</h3><p><img src="https://img-blog.csdnimg.cn/ff0f16a8b9d04f0e8a737ba1b0da2e83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_10,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol><li>组件从创建到死亡它会经历一些特定的阶段。</li><li>React组件中包含一系列勾子函数(生命周期回调函数), 会在特定的时刻调用。</li><li>我们在定义组件时，会在特定的生命周期回调函数中，做特定的工作</li></ol><p><img src="../images/image-20220309134244664-16468149258071.png" alt="image-20220309134244664" style="zoom:200%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;2_react生命周期(旧)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个“容器” --&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入react核心库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span><br><span class="line">1.constructor()</span><br><span class="line">2.componentWillMount()</span><br><span class="line">3.render()</span><br><span class="line">4.componentDidMount() =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span><br><span class="line">2. 更新阶段: 由组件内部this.setSate()或父组件render触发</span><br><span class="line">1.shouldComponentUpdate()</span><br><span class="line">2.componentWillUpdate()</span><br><span class="line">3.render() =====&gt; 必须使用的一个</span><br><span class="line">4.componentDidUpdate()</span><br><span class="line">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span><br><span class="line">1.componentWillUnmount()  =====&gt; 常用</span><br><span class="line">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span><br><span class="line">*/</span><br><span class="line">//创建组件</span><br><span class="line">class Count extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">//构造器</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">console.log(&#x27;Count---constructor&#x27;);</span><br><span class="line">super(props)</span><br><span class="line">//初始化状态</span><br><span class="line">this.state = &#123;count:0&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//加1按钮的回调</span><br><span class="line">add = ()=&gt;&#123;</span><br><span class="line">//获取原状态</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">//更新状态</span><br><span class="line">this.setState(&#123;count:count+1&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//卸载组件按钮的回调</span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//强制更新按钮的回调</span><br><span class="line">force = ()=&gt;&#123;</span><br><span class="line">this.forceUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要挂载的钩子</span><br><span class="line">componentWillMount()&#123;</span><br><span class="line">console.log(&#x27;Count---componentWillMount&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件挂载完毕的钩子</span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(&#x27;Count---componentDidMount&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要卸载的钩子</span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line">console.log(&#x27;Count---componentWillUnmount&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&#x27;Count---shouldComponentUpdate&#x27;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件将要更新的钩子</span><br><span class="line">componentWillUpdate()&#123;</span><br><span class="line">console.log(&#x27;Count---componentWillUpdate&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate()&#123;</span><br><span class="line">console.log(&#x27;Count---componentDidUpdate&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&#x27;Count---render&#x27;);</span><br><span class="line">const &#123;count&#125; = this.state</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;this.add&#125;&gt;点我+1&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.death&#125;&gt;卸载组件&lt;/button&gt;</span><br><span class="line">&lt;button onClick=&#123;this.force&#125;&gt;不更改任何状态中的数据，强制更新一下&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件A</span><br><span class="line">class A extends React.Component&#123;</span><br><span class="line">//初始化状态</span><br><span class="line">state = &#123;carName:&#x27;奔驰&#x27;&#125;</span><br><span class="line"></span><br><span class="line">changeCar = ()=&gt;&#123;</span><br><span class="line">this.setState(&#123;carName:&#x27;奥拓&#x27;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;我是A组件&lt;/div&gt;</span><br><span class="line">&lt;button onClick=&#123;this.changeCar&#125;&gt;换车&lt;/button&gt;</span><br><span class="line">&lt;B carName=&#123;this.state.carName&#125;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子组件B</span><br><span class="line">class B extends React.Component&#123;</span><br><span class="line">//组件将要接收新的props的钩子</span><br><span class="line">componentWillReceiveProps(props)&#123;</span><br><span class="line">console.log(&#x27;B---componentWillReceiveProps&#x27;,props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//控制组件更新的“阀门”</span><br><span class="line">shouldComponentUpdate()&#123;</span><br><span class="line">console.log(&#x27;B---shouldComponentUpdate&#x27;);</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">//组件将要更新的钩子</span><br><span class="line">componentWillUpdate()&#123;</span><br><span class="line">console.log(&#x27;B---componentWillUpdate&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//组件更新完毕的钩子</span><br><span class="line">componentDidUpdate()&#123;</span><br><span class="line">console.log(&#x27;B---componentDidUpdate&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(&#x27;B---render&#x27;);</span><br><span class="line">return(</span><br><span class="line">&lt;div&gt;我是B组件，接收到的车是:&#123;this.props.carName&#125;&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//渲染组件</span><br><span class="line">ReactDOM.render(&lt;Count/&gt;,document.getElementById(&#x27;test&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-9-3-生命周期（新）"><a href="#2-9-3-生命周期（新）" class="headerlink" title="2.9.3 生命周期（新）"></a>2.9.3 生命周期（新）</h3><p><img src="https://img-blog.csdnimg.cn/ca56ace597da4d28a9ff21e04f6ffc86.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAT2ggTm8g5Y-R6YeP5Y-I5bCR5LqG,size_10,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>3_react生命周期(新)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/17.0.1/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1.constructor()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2.getDerivedStateFromProps </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">3.render()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">4.componentDidMount() =====&gt; 常用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1.getDerivedStateFromProps</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2.shouldComponentUpdate()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">3.render()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">4.getSnapshotBeforeUpdate</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">5.componentDidUpdate()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1.componentWillUnmount()  =====&gt; 常用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//构造器</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---constructor&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">super</span>(props)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//初始化状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//加1按钮的回调</span></span></span><br><span class="line"><span class="language-javascript">add = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取原状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//更新状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//卸载组件按钮的回调</span></span></span><br><span class="line"><span class="language-javascript">death = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//强制更新按钮的回调</span></span></span><br><span class="line"><span class="language-javascript">force = <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//在更新之前获取快照</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getSnapshotBeforeUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;atguigu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//组件挂载完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidMount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//组件将要卸载的钩子</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUnmount&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//控制组件更新的“阀门”</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---shouldComponentUpdate&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//组件更新完毕的钩子</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,snapshotValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidUpdate&#x27;</span>,preProps,preState,snapshotValue);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---render&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>(</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//渲染组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span> <span class="attr">count</span>=<span class="string">&#123;199&#125;/</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-React入门&quot;&gt;&lt;a href=&quot;#1-React入门&quot; class=&quot;headerlink&quot; title=&quot;1 React入门&quot;&gt;&lt;/a&gt;1 React入门&lt;/h1&gt;&lt;h2 id=&quot;1-1-React简介&quot;&gt;&lt;a href=&quot;#1-1-React简介&quot; c</summary>
      
    
    
    
    <category term="React" scheme="https://xuesenxu.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://xuesenxu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>有效字母异位词</title>
    <link href="https://xuesenxu.github.io/posts/3b0d22ad.html"/>
    <id>https://xuesenxu.github.io/posts/3b0d22ad.html</id>
    <published>2022-02-15T12:11:46.000Z</published>
    <updated>2022-09-19T09:28:14.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://leetcode-cn.com/problems/valid-anagram/">力扣题目链接</a></strong></p><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p><p>示例 1:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;anagram&quot;</span>, t = <span class="string">&quot;nagaram&quot;</span></span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;rat&quot;</span>, t = <span class="string">&quot;car&quot;</span></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="为什么不可以用异位"><a href="#为什么不可以用异位" class="headerlink" title="为什么不可以用异位"></a>为什么不可以用异位</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            start ^= s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            start ^= t.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到这道题我首先想到的是采用异或运算的方式来解决，但是这道题没法采用异或运算进行解决。</p><p>如果两个字符串本身的字符通过异或运算都恰好等于0而这两个字符串并非是字母异位词的话返回的结果仍然是<code>true</code>，比如：<code>s=&quot;aa&quot; t=&quot;bb&quot;</code>如果通过上面的代码则返回的是<code>true</code>。</p><h2 id="使用哈希表"><a href="#使用哈希表" class="headerlink" title="使用哈希表"></a>使用哈希表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> letter [] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            letter[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">            letter[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>] -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k : letter) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组其实就是一个简单地哈希表</strong>，从a字符~z字符的ASCII也是26个连续的数值，于是我们可以将字母转换为数字作为数组的下标，下标所对应的数组中的值就是字符出现的次数。</p><h2 id="先排序，后比较"><a href="#先排序，后比较" class="headerlink" title="先排序，后比较"></a>先排序，后比较</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> sArray [] = s.toCharArray();</span><br><span class="line">        <span class="type">char</span> tArray [] = t.toCharArray();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(sArray);</span><br><span class="line">        Arrays.sort(tArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Arrays.equals(sArray,tArray)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以先将两个字符串转换为字符数组，然后再将两个数组进行排序，如果两个数组相等则返回<code>true</code>，否则返回<code>false</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/valid-anagram/&quot;&gt;力扣题目链接&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。&lt;/p&gt;</summary>
      
    
    
    
    <category term="哈希" scheme="https://xuesenxu.github.io/categories/%E5%93%88%E5%B8%8C/"/>
    
    
    <category term="算法" scheme="https://xuesenxu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
